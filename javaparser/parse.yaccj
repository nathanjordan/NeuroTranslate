%{

import java.io.*;
import unr.neurotranslate.ncsclasses.*;

%}

%token <rval> REAL
%token <ival> INTEGER LOGICAL
%token <sval> NAME

/* Tokens that match input file keywords are all named with the prefix "TK_"*/
/* This is so the obvious names can be used in the C code without conflicts */

%token TK_ABSOLUTE_USE   TK_AMP_END        TK_AMP_START      TK_ASCII
%token TK_BRAIN          TK_CA_EXP         TK_CA_EXTERNAL    TK_CA_HALF_MIN
%token TK_CA_INTERNAL    TK_CA_SCALE       TK_CA_SPIKE_INC   TK_CA_TAU
%token TK_CA_SPIKE_INC   TK_CA_TAU         TK_CA_TAU_SCALE   TK_CELL
%token TK_CELLS          TK_CELLS_PER_FREQ TK_CELL_TYPE      TK_CHANNEL
%token TK_COLUMN         TK_CSHELL         TK_COLUMN_TYPE    TK_CMP
%token TK_G              TK_CONNECT        TK_DATA_LABEL     TK_DELAY
%token TK_DEPR_TAU       TK_DURATION       TK_DYN_RANGE      TK_END_BRAIN    
%token TK_END_COLUMN     TK_END_CSHELL     TK_END_CMP        TK_END_CELL
%token TK_END_CHANNEL    TK_END_LAYER      TK_END_LSHELL     TK_END_REPORT   
%token TK_END_SPIKE      TK_END_STIMULUS   TK_END_ST_INJECT  TK_END_SYNAPSE
%token TK_END_SYN_DATA   TK_END_SYN_FD     TK_END_SYN_PSG    TK_END_SYN_LEARN
%token TK_E_HALF_MIN_H   TK_E_HALF_MIN_M   TK_FACIL_TAU      TK_FILENAME
%token TK_FREQUENCY      TK_FREQ_ROWS      TK_FREQ_START     TK_FSV
%token TK_HEIGHT         TK_H_INITIAL      TK_H_POWER        TK_IGNORE_EMPTY
%token TK_INJECT         TK_INTERACTIVE    TK_LAYER          TK_LSHELL
%token TK_LAYER_TYPE     TK_LEAK_G         TK_LEAK_REVERSAL  TK_LEARN
%token TK_LEARN_LABEL    TK_LOCATION       TK_LOWER          TK_MAX_G
%token TK_MODE           TK_M_INITIAL      TK_M_POWER        TK_NEG_HEB_WINDOW
%token TK_PATTERN        TK_POS_HEB_WINDOW TK_PROB           TK_PSG_FILE      
%token TK_RELOAD_SYN     TK_REPORT         TK_REPORT_ON      TK_REVERSAL       
%token TK_RSE            TK_RSE_LABEL      TK_R_MEMBRANE     TK_SAMESEED
%token TK_SAVE_SYN       TK_SEED TK_SFD    TK_SFD_LABEL      TK_SLOPE_H
%token TK_SLOPE_M        TK_SPIKE          TK_STIMULUS       TK_SPIKE_HW
%token TK_ST_INJECT      TK_STIM_TYPE      TK_SYNAPSE        TK_STRENGTH
%token TK_SYN_DATA       TK_SYN_FD         TK_SYN_LEARN      TK_SYN_PSG
%token TK_SYN_REVERSAL   TK_TAU_MEMBRANE   TK_TAU_SCALE_M    TK_TAU_SCALE_H
%token TK_THRESHOLD      TK_TIME_END       TK_TIME_START     TK_TIME_FREQ_INC
%token TK_TIMING         TK_TYPE           TK_UPPER          TK_UNITARY_G
%token TK_VMREST         TK_VOLTAGES       TK_VTAU_VAL_M     TK_VTAU_VAL_H
%token TK_PORT           TK_WIDTH          TK_JOB            TK_DISTRIBUTE
%token TK_VAL_M_STDEV    TK_VOLT_M_STDEV   TK_SLOPE_M_STDEV
%token TK_VAL_H_STDEV    TK_VOLT_H_STDEV   TK_SLOPE_H_STDEV
%token TK_NEG_HEB_PEAK_DELTA_USE   TK_NEG_HEB_PEAK_TIME      TK_VTAU_VOLT_M
%token TK_POS_HEB_PEAK_DELTA_USE   TK_POS_HEB_PEAK_TIME      TK_VTAU_VOLT_H
%token TK_INCLUDE        TK_RSE_INIT       TK_VERT_TRANS     TK_PREV_SPIKE_RANGE
%token TK_CONNECT_RPT    TK_SPIKE_RPT      TK_SERVER         TK_SINGLE
%token TK_CA_EXP_RANGE   TK_PHASE_SHIFT    TK_STRENGTH_RANGE TK_SYNAPSE_RSE
%token TK_ALPHA_SCALE_H  TK_ALPHA_SCALE_M  TK_BETA_SCALE_H   TK_BETA_SCALE_M
%token TK_SAVE           TK_LOAD           TK_DISTANCE       TK_OUTPUT_CONNECT_MAP
%token TK_OUTPUT_CELLS   TK_AUTO           TK_SERVER_PORT    TK_VERSION
%token TK_SYNAPSE_UF     TK_RECURRENT_CONNECT TK_ALPHA
%token TK_SYN_AUGMENTATION      TK_END_SYN_AUGMENTATION      TK_MAX_AUGMENTATION
%token TK_AUGMENTATION_INIT     TK_AUGMENTATION_TAU          TK_SYN_CALCIUM
%token TK_CA_TAU_DECAY   TK_EXP            TK_SELECT_FRONT   TK_OPTION
%token TK_AVERAGE_SYN    TK_AUGMENTATION_DELAY               TK_WARNINGS_OFF
%token TK_HIDE_TIMESTEP  TK_HEBB_START TK_HEBB_END TK_EVENT  TK_OVERRIDE
%token TK_LEARN_SHAPE    TK_RATE           TK_TAU_NOISE      TK_CORREL
%token TK_END_EVENT      TK_CELL_SEQUENCE   TK_SFD_START     TK_SFD_END

/* Tokens for channel family types */

%token TK_Km  TK_Kahp  TK_Ka  TK_Na  TK_Knicd

%% /* Grammar rules and actions follow */

input:   element 
       | input element
       | input error
;

element:  brain
        | column
        | colshell
        | layer      
        | lshell
        | cell
        | compart
        | channel    
        | synapse
        | syn_psg
        | syn_fd
        | syn_learn
        | syn_data
        | syn_augmentation
        | spikeshape 
        | stimulus
        | stinject
        | report
        | event
        | TK_INCLUDE NAME { multiInput( $<sval>2 ); }
; 

/*--------------- Input for the BRAIN structure ------------*/

brain:    TK_BRAIN { brain = new Brain(); } brainvars TK_END_BRAIN
;

brainvars: brainvar
         | brainvars brainvar
;

brainvar:  TK_TYPE         NAME    { brain.type      = strdup ($<sval>2); }
         | TK_JOB          NAME    { brain.job         = strdup ($<sval>2); }
         | TK_DISTRIBUTE   NAME    {  }
         | TK_CONNECT_RPT          {  }
         | TK_SPIKE_RPT            {  }
         | TK_FSV          value   { brain.FSV         = $<rval>2; }
         | TK_DURATION     value   { brain.duration    = $<rval>2; }
         | TK_SEED         INTEGER { brain.seed        = $<ival>2; }
         | TK_COLUMN_TYPE  NAME    { brain.columnTypeNames.add( $<sval>2 ); }
         | TK_ST_INJECT    NAME    { brain.stimulusInjectNames.add( $<sval>2 ); }
         | TK_REPORT       NAME    { brain.reportNames.add( $<sval>2); }
         | TK_CONNECT      NAME NAME NAME NAME NAME NAME NAME NAME NAME value value
               { brain.connect.add( new Connect( $<sval>2, $<sval>3, $<sval>4, $<sval>5,
                                               $<sval>6, $<sval>7, $<sval>8, $<sval>9,
                                               $<sval>10, $<rval>11, $<rval>12 ) );
               }
         | TK_CONNECT      NAME NAME NAME NAME NAME NAME NAME NAME NAME value value value
               { brain.connect.add( new Connect( $<sval>2, $<sval>3, $<sval>4, $<sval>5,
                                               $<sval>6, $<sval>7, $<sval>8, $<sval>9,
                                               $<sval>10, $<rval>11, $<rval>12, $<rval>13 ) );
               }
         | TK_RECURRENT_CONNECT NAME NAME NAME NAME NAME NAME NAME NAME NAME value value
               {
                 brain.recurrentConnect.add( new RecurrentConnect( $<sval>2, $<sval>3, $<sval>4, $<sval>5,
					                                               $<sval>6, $<sval>7, $<sval>8, $<sval>9,
					                                               $<sval>10, $<rval>11, $<rval>12 ) );
               }

         | TK_SAVE         NAME    value { brain.savefile = $<sval>2; brain.saveTime = $<rval>3; }
         | TK_LOAD         NAME    { brain.load = $<sval>2; }
         | TK_PORT         INTEGER { brain.port = $<ival>2; }
         | TK_PORT         TK_AUTO { brain.port = -1; }
         | TK_PORT         TK_SINGLE { brain.port = -2; }
         | TK_SERVER       NAME    { brain.server = $<sval>2; }
         | TK_SERVER_PORT  INTEGER { brain.serverPort = $<ival>2; }
         | TK_DISTANCE     LOGICAL { brain.distance =  $<ival>2; }
         | TK_OUTPUT_CELLS LOGICAL { brain.outputCells = $<ival>2;  }
         | TK_OUTPUT_CONNECT_MAP LOGICAL  { brain.outputConnectMap = $<ival>2;  }
         | TK_OPTION       TK_WARNINGS_OFF  { brain.warningsOn = true;  }
         | TK_EVENT        NAME    { brain.eventNames.add( $<sval>2 ); }
;

/*--------------- Input for the COLUMN_SHELL structure ------------*/

colshell: TK_CSHELL {

		columnShellList.add( columnShellList.size() , new ColumnShell() ); 
		
		} cshvars TK_END_CSHELL
;

cshvars: cshvar
       | cshvars cshvar
;

cshvar: TK_TYPE     NAME        { columnShellList[columnShellList.size() - 1].type = $<sval>2; }
      | TK_WIDTH    value       { columnShellList[columnShellList.size() - 1].width  = $<rval>2; }
      | TK_HEIGHT   value       { columnShellList[columnShellList.size() - 1].height = $<rval>2; }
      | TK_LOCATION value value { columnShellList[columnShellList.size() - 1].x = $<rval>2; columnShellList[columnShellList.size() - 1].y = $<rval>3; }
;

/*--------------- Input for the COLUMN structure ------------*/

column:   TK_COLUMN { 
	
	columnList.add( columnList.size() , new Column() );
	
	} colvars TK_END_COLUMN
;

colvars: colvar
       | colvars colvar
;

colvar: TK_TYPE       NAME { columnList[ columnList.size() - 1].type = $<sval>2; }
      | TK_CSHELL     NAME { columnList[ columnList.size() - 1].shellName  = strdup ($<sval>2); }
      | TK_LAYER_TYPE NAME { columnList[ columnList.size() - 1].layerNames.add( $<sval>2 ); }
      | TK_CONNECT    NAME NAME NAME NAME NAME NAME NAME value value
               { columnList[ columnList.size() - 1].connects.add( new Connect( null, $<sval>2, $<sval>3, $<sval>4, null, $<sval>5, $<sval>6, $<sval>7,  $<sval>8, $<rval>9, $<rval>10 ) );
               }
      | TK_CONNECT    NAME NAME NAME NAME NAME NAME NAME value value value
               { columnList[ columnList.size() - 1].connects.add( new Connect ( null, $<sval>2, $<sval>3, $<sval>4, null, $<sval>5, $<sval>6, $<sval>7, $<sval>8, $<rval>9, $<rval>10, $<rval>11 ) );
               }
       | TK_RECURRENT_CONNECT NAME NAME NAME NAME NAME NAME NAME value value
               {
                columnList[ columnList.size() - 1].recurrentConnects.add( new RecurrentConnect( NULL, $<sval>2, $<sval>3, $<sval>4, NULL, $<sval>5, $<sval>6, $<sval>7, $<sval>8, $<rval>9, $<rval>10  ));
               }
;

/*--------------- Input for the LAYER_SHELL structure ------------*/

lshell:   TK_LSHELL { layerShellList.add( layerShellList.size() , new LayerShell() ); } lsvars TK_END_LSHELL
;

lsvars: lsvar
      | lsvars lsvar
;

lsvar: TK_TYPE  NAME  { layerShellList[ layerShellList.size() - 1 ].type = $<sval>2; }
     | TK_LOWER value { layerShellList[ layerShellList.size() - 1 ].lower  = $<rval>2; }
     | TK_UPPER value { layerShellList[ layerShellList.size() - 1 ].upper  = $<rval>2; }
;

/*--------------- Input for the LAYER structure ------------*/

layer:    TK_LAYER { layerList.add( new Layer() ); } lvars TK_END_LAYER
;

lvars:   lvar
       | lvars lvar
;

lvar:   TK_TYPE       NAME         { layerList[ layerList.size() - 1 ].type = $<sval>2; }
      | TK_LSHELL     NAME         { layerList[ layerList.size() - 1 ].layerShellName = $<sval>2; }
      | TK_CELL_TYPE  NAME INTEGER { layerList[ layerList.size() - 1 ].cellTypeNames.add( $<sval>2 );  layerList[ layerList.size() - 1 ].cellTypeQuantities.add( $<ival>3 ); }
      | TK_CONNECT    NAME NAME NAME NAME NAME value value
               { layerList[ layerList.size() - 1 ].connects.add( new Connect( NULL, NULL, $<sval>2, $<sval>3, NULL, NULL, $<sval>4, $<sval>5, $<sval>6, $<rval>7, $<rval>8 ) );
               }
      | TK_CONNECT    NAME NAME NAME NAME NAME value value value
               { layerList[ layerList.size() - 1 ].connects.add( new Connect( NULL, NULL, $<sval>2, $<sval>3, NULL, NULL, $<sval>4, $<sval>5, $<sval>6, $<rval>7, $<rval>8, $<rval>9 ) );
               }
      | TK_RECURRENT_CONNECT NAME NAME NAME NAME NAME value value
               {
                layerList[ layerList.size() - 1 ].recurrentConnects.add( new RecurrentConnect( NULL, NULL, $<sval>2, $<sval>3, NULL, NULL, $<sval>4, $<sval>5,  $<sval>6, $<rval>7, $<rval>8 ) );
               }
;

/*--------------- Input for the CELL structure ------------*/

cell: TK_CELL { cellList.add( new Cell() ); } cellvars TK_END_CELL
;

cellvars: cellvar
        | cellvars cellvar
;

cellvar: TK_TYPE    NAME  { cellList[ cellList.size() - 1 ].type = $<sval>2; }
       | TK_CMP     NAME NAME value value
                          {  cellList[ cellList.size() - 1 ].compartmentNames.add( $<sval>2 );
                             cellList[ cellList.size() - 1 ].compartmentLabels.add( $<sval>3 );
                             cellList[ cellList.size() - 1 ].xList.add( $<rval>4 );
                             cellList[ cellList.size() - 1 ].xList.add( $<rval>5 );
                          }
       | TK_CMP     NAME NAME value value value
                          {  }

       | TK_CONNECT NAME NAME value value value
                          { cell->CnList = makeCmpConn (cell->CnList, $<sval>2, $<sval>3, 
                                                         $<rval>4, $<rval>5, $<rval>6); 
                            cell->nConnect++;
                          }
;

/*--------------- Input for the COMPARTMENT structure ------------*/

compart: TK_CMP  { compartmentList.add( new Compartment() ); } cmpvars TK_END_CMP
;

cmpvars: cmpvar
       | cmpvars cmpvar
;

cmpvar:  TK_TYPE          NAME     { compartmentList[ compartmentList.size() - 1].type = $<sval>2; }
       | TK_SEED          INTEGER  { compartmentList[ compartmentList.size() - 1].seed = $<ival>2; }
       | TK_SPIKE         NAME     { compartmentList[ compartmentList.size() - 1].spikeshapeName = $<sval>2; }
       | TK_CHANNEL       NAME     { compartmentList[ compartmentList.size() - 1].channelNames.add( $<sval>2 ); }
       | TK_TAU_MEMBRANE  { twoPtr = compartmentList[ compartmentList.size() - 1].tauMembrane; }  twovalue
       | TK_R_MEMBRANE    { twoPtr = compartmentList[ compartmentList.size() - 1].rMembrane; }    twovalue
       | TK_THRESHOLD     { twoPtr = compartmentList[ compartmentList.size() - 1].threshold; }     twovalue
       | TK_LEAK_REVERSAL { twoPtr = compartmentList[ compartmentList.size() - 1].leakReversal; } twovalue
       | TK_LEAK_G        { twoPtr = compartmentList[ compartmentList.size() - 1].leakConductance; }        twovalue
       | TK_VMREST        { twoPtr = compartmentList[ compartmentList.size() - 1].vmRest; }        twovalue
       | TK_CA_INTERNAL   { twoPtr = compartmentList[ compartmentList.size() - 1].caInternal; }         twovalue
       | TK_CA_EXTERNAL   { twoPtr = compartmentList[ compartmentList.size() - 1].caExternal; }         twovalue
       | TK_CA_TAU        { twoPtr = compartmentList[ compartmentList.size() - 1].caTau; }         twovalue
       | TK_CA_SPIKE_INC  { twoPtr = compartmentList[ compartmentList.size() - 1].caSpikeIncrement; }    twovalue
;

/*--------------- Input for the CHANNEL structure ------------*/
/* There are several types of channels that can be input.  The type is
   specified by a family name following the TK_CHANNEL keyword */


channel: TK_CHANNEL TK_Km   { channelList.add new Channel( $<sval>2 ); } Kmvars   TK_END_CHANNEL
       | TK_CHANNEL TK_Kahp { channelList.add new Channel( $<sval>2 ); } Kahpvars TK_END_CHANNEL
       | TK_CHANNEL TK_Ka   { channelList.add new Channel( $<sval>2 ); } Kavars   TK_END_CHANNEL
       | TK_CHANNEL TK_Na   { channelList.add new Channel( $<sval>2 ); } Navars   TK_END_CHANNEL
       | TK_CHANNEL TK_Knicd { channelList.add new Channel( $<sval>2 ); } Knicdvars TK_END_CHANNEL
;

Kmvars: chvar
      | Kmvars chvar
      | Kmvars Kmvar
;

Kahpvars: chvar
        | Kahpvars chvar
        | Kahpvars Kahpvar
;

Kavars: chvar
      | Kavars chvar
      | Kavars Kavar
;

Navars: chvar
      | Navars chvar
      | Navars Navar
;

Knicdvars: chvar
         | Knicdvars chvar
;

/* chvars are those that are common to all families */

chvar: TK_TYPE       NAME     { channelList[ channelList.size() - 1 ].type = $<sval>2; }
     | TK_M_POWER    { twoPtr = channelList[ channelList.size() - 1 ].mPower; }     twovalue
     | TK_UNITARY_G  { twoPtr = channelList[ channelList.size() - 1 ].unitaryG; }   twovalue
     | TK_STRENGTH   { twoPtr = channelList[ channelList.size() - 1 ].strength ; }  twovalue
     | TK_STRENGTH_RANGE   { }  twovalue
     | TK_M_INITIAL  { twoPtr = channelList[ channelList.size() - 1 ].mInitial; }  twovalue
     | TK_REVERSAL   { twoPtr = channelList[ channelList.size() - 1 ].reversePotential; } twovalue 
     | TK_SEED       INTEGER  { channelList[ channelList.size() - 1 ].seed = $<ival>2; }
;

Kmvar: TK_E_HALF_MIN_M  { twoPtr = channelList[ channelList.size() - 1 ].eHalfMinM; } twovalue 
     | TK_TAU_SCALE_M   { twoPtr = channelList[ channelList.size() - 1 ].tauScaleFactorM; } twovalue
     | TK_SLOPE_M       value value value { chan->slopeM [0] = $<rval>2;
                                            chan->slopeM [1] = $<rval>3;
                                            chan->slopeM [2] = $<rval>4; }
     | TK_SLOPE_M_STDEV value { }
;

Kahpvar: TK_CA_SCALE     { twoPtr = channelList[ channelList.size() - 1 ].caScaleFactor; }     twovalue
       | TK_CA_EXP       { twoPtr = channelList[ channelList.size() - 1 ].caExpFactor; }       twovalue
       | TK_CA_EXP_RANGE {  } twovalue
       | TK_CA_HALF_MIN  { twoPtr = channelList[ channelList.size() - 1 ].caHalfMin; }  twovalue
       | TK_CA_TAU_SCALE { twoPtr = channelList[ channelList.size() - 1 ].caTauScaleFactor; } twovalue
;

Kavar: TK_H_INITIAL      { twoPtr = channelList[ channelList.size() - 1 ].hInitial; } twovalue
     | TK_H_POWER        { twoPtr = channelList[ channelList.size() - 1 ].hPower;    } twovalue
     | TK_E_HALF_MIN_M   { twoPtr = channelList[ channelList.size() - 1 ].eHalfMinMKa;  } twovalue
     | TK_E_HALF_MIN_H   { twoPtr = channelList[ channelList.size() - 1 ].eHalfMinH;  } twovalue
     | TK_SLOPE_M          value { chan->slopeM [0] = $<rval>2; }
     | TK_SLOPE_M_STDEV    value { chan->slopeM_stdev = $<rval>2; }
     | TK_SLOPE_H          value { chan->slopeH [0] = $<rval>2; }
     | TK_SLOPE_H_STDEV    value { chan->slopeH_stdev = $<rval>2; }

     | TK_VAL_M_STDEV      value { chan->ValM_stdev  = $<rval>2; }
     | TK_VOLT_M_STDEV     value { chan->VoltM_stdev = $<rval>2; }
     | TK_VAL_H_STDEV      value { chan->ValH_stdev  = $<rval>2; }
     | TK_VOLT_H_STDEV     value { chan->VoltH_stdev = $<rval>2; }

     | TK_VTAU_VAL_M  { nval = 0; } values { chan->nValM  = nval; chan->TauValM  = allocVlist (nval, vlist); }
     | TK_VTAU_VOLT_M { nval = 0; } values { chan->nVoltM = nval; chan->TauVoltM = allocVlist (nval, vlist); }
     | TK_VTAU_VAL_H  { nval = 0; } values { chan->nValH  = nval; chan->TauValH  = allocVlist (nval, vlist); }
     | TK_VTAU_VOLT_H { nval = 0; } values { chan->nVoltH = nval; chan->TauVoltH = allocVlist (nval, vlist); }
;

Navar: TK_E_HALF_MIN_M  { twoPtr = chan->eHalfMinM; } twovalue
     | TK_E_HALF_MIN_H  { twoPtr = chan->eHalfMinH;  } twovalue
     | TK_H_INITIAL      { twoPtr = chan->H_Initial; } twovalue
     | TK_H_POWER        { twoPtr = chan->hPower;    } twovalue
     | TK_TAU_SCALE_M   { twoPtr = chan->tauScaleM; } twovalue
     | TK_TAU_SCALE_H   { twoPtr = chan->tauScaleH; } twovalue
     | TK_SLOPE_M       value value { chan->slopeM [0] = $<rval>2;
                                      chan->slopeM [1] = $<rval>3; }
     | TK_SLOPE_H       value value { chan->slopeH [0] = $<rval>2;
                                      chan->slopeH [1] = $<rval>3; }
     | TK_SLOPE_M_STDEV    value { chan->slopeM_stdev = $<rval>2; }
     | TK_SLOPE_H_STDEV    value { chan->slopeH_stdev = $<rval>2; }
     | TK_ALPHA_SCALE_M { twoPtr = chan->alphaScaleFactorM; } twovalue
     | TK_BETA_SCALE_M { twoPtr = chan->betaScaleFactorM; } twovalue
     | TK_ALPHA_SCALE_H { twoPtr = chan->alphaScaleFactorH; } twovalue
     | TK_BETA_SCALE_H { twoPtr = chan->betaScaleFactorH; } twovalue
;

/*--------------- Input for the SYNAPSE structure ------------*/

synapse: TK_SYNAPSE { synapseList.add( new Synapse() ); } synvars TK_END_SYNAPSE
;

synvars: synvar
       | synvars synvar
;

synvar: TK_TYPE           NAME    { synapseList[ synapseList.size() - 1].type = $<sval>2; }
      | TK_SEED           INTEGER { synapseList[ synapseList.size() - 1].seed = $<ival>2; }
      | TK_SFD_LABEL      NAME    { synapseList[ synapseList.size() - 1].sfdLabel = $<sval>2; }
      | TK_LEARN_LABEL    NAME    { synapseList[ synapseList.size() - 1].learnLabel = $<sval>2; }
      | TK_DATA_LABEL     NAME    { }
      | TK_SYN_AUGMENTATION NAME  { syn->AugmentationName = strdup ( $<sval>2 ); }
      | TK_SYN_PSG        NAME    { synapseList[ synapseList.size() - 1].synPSG  = $<sval>2; }
      | TK_ABSOLUTE_USE  { twoPtr = synapseList[ synapseList.size() - 1].absoluteUse; } twovalue
      | TK_DELAY         { twoPtr = syn->SynDelay; } twovalue
      | TK_SYN_REVERSAL  { twoPtr = synapseList[ synapseList.size() - 1].synReversal; } twovalue
      | TK_MAX_G         { twoPtr = syn->MaxG; } twovalue
      | TK_RSE_INIT  { twoPtr = syn->InitRSE; } twovalue
      | TK_PREV_SPIKE_RANGE { twoPtr = syn->InitDeltaT; } twovalue
      | TK_HEBB_START  value {
            if( syn->nToggles % 10 == 0 )  //need to allocate more space
            {
                syn->toggleTimes = (double*) realloc( syn->toggleTimes, sizeof(double)*(syn->nToggles+10) );
                syn->toggleModes = (int*) realloc( syn->toggleModes, sizeof(int)*(syn->nToggles+10) );
            }
            syn->toggleTimes[syn->nToggles] = $<rval>2;
            syn->toggleModes[syn->nToggles++] = 1;
        }
      | TK_HEBB_END  value {
            if( syn->nToggles % 10 == 0 )  //need to allocate more space
            {
                syn->toggleTimes = (double*) realloc( syn->toggleTimes, sizeof(double)*(syn->nToggles+10) );
                syn->toggleModes = (int*) realloc( syn->toggleModes, sizeof(int)*(syn->nToggles+10) );
            }
            syn->toggleTimes[syn->nToggles] = $<rval>2;
            syn->toggleModes[syn->nToggles++] = 0;
        }
        // Added 8/12/10 Joshua Hegie
      | TK_SFD_START  value {
            if( syn->nSfdToggles % 10 == 0 )  //need to allocate more space
            {
                syn->sfdToggleTimes = (double*) realloc( syn->sfdToggleTimes, sizeof(double)*(syn->nSfdToggles+10) );
                syn->sfdToggleModes = (int*) realloc( syn->sfdToggleModes, sizeof(int)*(syn->nSfdToggles+10) );
                printf ("Realloc worked\n");
            }
            syn->sfdToggleTimes[syn->nSfdToggles] = $<rval>2;
            syn->sfdToggleModes[syn->nSfdToggles++] = 1;
        }
      | TK_SFD_END  value {
            if( syn->nSfdToggles % 10 == 0 )  //need to allocate more space
            {
                syn->sfdToggleTimes = (double*) realloc( syn->sfdToggleTimes, sizeof(double)*(syn->nSfdToggles+10) );
                syn->sfdToggleModes = (int*) realloc( syn->sfdToggleModes, sizeof(int)*(syn->nSfdToggles+10) );
            }
            syn->sfdToggleTimes[syn->nSfdToggles] = $<rval>2;
            syn->sfdToggleModes[syn->nSfdToggles++] = 0;
        }
;

/*--------------- Input for the SYN_INPUT_PSG structure ------------*/

syn_psg: TK_SYN_PSG { syn_psg = makesyn_psg (); } spvars  TK_END_SYN_PSG
;

spvars: spvar
      | spvars spvar
;

spvar: TK_TYPE     NAME { syn_psg->L.name = strdup ($<sval>2); }
     | TK_PSG_FILE NAME { syn_psg->File   = strdup ($<sval>2); }
;

/*--------------- Input for the SYN_FACIL_DEPRESS structure ------------*/

syn_fd:  TK_SYN_FD { syn_fd = makesyn_fd (); } sfvars TK_END_SYN_FD
;

sfvars: sfvar
      | sfvars sfvar
;

sfvar: TK_TYPE      NAME     { syn_fd->L.name = strdup ($<sval>2); }
     | TK_SEED      INTEGER  { syn_fd->Seed   = $<ival>2; }
     | TK_SFD       NAME     { syn_fd->SFD    = SFDCode ($<sval>2); }
     | TK_FACIL_TAU { twoPtr = syn_fd->Facil_Tau; } twovalue 
     | TK_DEPR_TAU  { twoPtr = syn_fd->Depr_Tau; }  twovalue
;

/*--------------- Input for the SYN_LEARNING structure ------------*/

syn_learn: TK_SYN_LEARN { syn_learn = makesyn_learn (); } slvars  TK_END_SYN_LEARN
;

slvars: slvar
      | slvars slvar
;

slvar: TK_TYPE                   NAME     { syn_learn->L.name = strdup ($<sval>2); }
     | TK_SEED                   INTEGER  { syn_learn->Seed = $<ival>2; }
     | TK_LEARN                  NAME     { syn_learn->Learning = LearnCode ($<sval>2); }
     | TK_LEARN_SHAPE            NAME     { syn_learn->Learning_Shape = LearnShape ($<sval>2); }
     | TK_NEG_HEB_WINDOW         { twoPtr = syn_learn->DownWind; }               twovalue 
     | TK_POS_HEB_WINDOW         { twoPtr = syn_learn->UpWind; }                 twovalue 
     | TK_NEG_HEB_PEAK_DELTA_USE { twoPtr = syn_learn->Neg_Heb_Peak_Delta_Use; } twovalue 
     | TK_POS_HEB_PEAK_DELTA_USE { twoPtr = syn_learn->Pos_Heb_Peak_Delta_Use; } twovalue 
     | TK_NEG_HEB_PEAK_TIME      { twoPtr = syn_learn->Neg_Heb_Peak_Time; }      twovalue
     | TK_POS_HEB_PEAK_TIME      { twoPtr = syn_learn->Pos_Heb_Peak_Time; }      twovalue
;

/*--------------- Input for the SYN_DATA structure ------------*/

syn_data: TK_SYN_DATA { syn_data = makesyn_data (); 
                        deprecate (TK_SYN_DATA); } sdvars  TK_END_SYN_DATA
;

sdvars: sdvar
      | sdvars sdvar
;

sdvar: TK_TYPE         NAME     { syn_data->L.name = strdup ($<sval>2); }
     | TK_SEED         INTEGER  { syn_data->Seed   = $<ival>2; }
     | TK_MAX_G        { twoPtr = syn_data->MaxG; } twovalue
     | TK_DELAY        { twoPtr = syn_data->SynDelay; } twovalue 
     | TK_SYN_REVERSAL { twoPtr = syn_data->SynRever; } twovalue 
;

/*--------------- Input for the SYN_AUGMENTATION structure ------------*/

syn_augmentation: TK_SYN_AUGMENTATION { syn_augmentation = makesyn_augmentation (); } savars TK_END_SYN_AUGMENTATION
;

savars: savar
      | savars savar

savar: TK_TYPE                 NAME    { syn_augmentation->L.name = strdup ($<sval>2 ); }
     | TK_CA_INTERNAL          { twoPtr = syn_augmentation->CA_init; } twovalue
     | TK_CA_TAU_DECAY         { twoPtr = syn_augmentation->CA_decay; } twovalue
     | TK_CA_TAU               { twoPtr = syn_augmentation->CA_tau; } twovalue
     | TK_CA_SPIKE_INC         { twoPtr = syn_augmentation->CA_increment; } twovalue
     | TK_MAX_AUGMENTATION     { twoPtr = syn_augmentation->MaxSA; } twovalue
     | TK_ALPHA                { twoPtr = syn_augmentation->Alpha; } twovalue
     | TK_AUGMENTATION_INIT    { twoPtr = syn_augmentation->Augmentation_init; } twovalue
     | TK_AUGMENTATION_TAU     { twoPtr = syn_augmentation->Augmentation_tau; } twovalue
     | TK_AUGMENTATION_DELAY   { twoPtr = syn_augmentation->SA_delay; } twovalue
;

/*--------------- Input for the SPIKESHAPE structure ------------*/

spikeshape: TK_SPIKE { spike = makespike (); } spikevars TK_END_SPIKE
;

spikevars: spikevar 
         | spikevars spikevar
;

spikevar: TK_TYPE NAME { spike->L.name = strdup ($<sval>2); }
        | TK_VOLTAGES  { nval = 0; } values { spike->nVoltages = nval;
                                              spike->Voltages  = allocRVlist (nval, vlist); }
;

/*--------------- Input for the STIMULUS structure ------------*/

stimulus: TK_STIMULUS { stim = makestim (); } stvars TK_END_STIMULUS
;

stvars: stvar 
      | stvars stvar
;

stvar: TK_TYPE           NAME     { stim->L.name          = strdup ($<sval>2); }
     | TK_MODE           NAME     { stim->MODE            = ModeCode ($<sval>2); }
     | TK_PATTERN        NAME     { stim->PATTERN         = PatternCode ($<sval>2); }
     | TK_VERT_TRANS     value    { stim->VERT_TRANS      = $<rval>2; }
     | TK_PHASE_SHIFT    value    { stim->PHASE     = $<rval>2; }
     | TK_RATE           value    { stim->Rate            = $<rval>2; }
     | TK_TAU_NOISE      value    { stim->Tau             = $<rval>2; }
     | TK_CORREL         value    { stim->Correl          = $<rval>2; }
     | TK_TIMING         NAME     { stim->TIMING          = TimingCode ($<sval>2); }
     | TK_FILENAME       NAME     { stim->FileName        = strdup ($<sval>2); }
     | TK_PORT           INTEGER  { stim->Port            = $<ival>2; }
     | TK_PORT           TK_AUTO  { stim->Port            = -1; }
     | TK_SAMESEED       LOGICAL  { stim->SAME_SEED       = $<ival>2; }
     | TK_SEED           INTEGER  { stim->Seed            = $<ival>2; }
     | TK_FREQ_ROWS      INTEGER  { stim->nFreqs          = $<ival>2; }
     | TK_CELLS_PER_FREQ INTEGER  { stim->CellsPerFreq    = $<ival>2; }
     | TK_TIME_FREQ_INC  { twoPtr = stim->Time_Freq_Incr; } twovalue 
     | TK_DYN_RANGE      { twoPtr = stim->DynRange; } twovalue 
     | TK_AMP_START      value    { stim->AMP_Start       = $<rval>2; }
     | TK_AMP_END        value    { stim->AMP_End         = $<rval>2; }
     | TK_WIDTH          value    { stim->WidthSec        = $<rval>2; }
     | TK_FREQ_START     value    { stim->FREQ_Start      = $<rval>2; }
     | TK_TIME_START { nval = 0; } values { stim->nTStart = nval; 
                                            stim->TStart  = allocVlist (nval, vlist); }
     | TK_TIME_END   { nval = 0; } values { stim->nTStop  = nval;
                                            stim->TStop   = allocVlist (nval, vlist); }
;

/*--------------- Input for the ST_INJECT structure ------------*/

stinject: TK_ST_INJECT { sti = makesti (); } stivars TK_END_ST_INJECT
;

stivars: stivar 
       | stivars stivar
;

stivar: TK_TYPE      NAME { sti->L.name      = strdup ($<sval>2); }
      | TK_STIM_TYPE NAME { sti->StimName    = strdup ($<sval>2); }
      | TK_INJECT    NAME NAME NAME NAME value
                          { sti->ColName  = strdup ($<sval>2);
                            sti->LayName  = strdup ($<sval>3);
                            sti->CellName = strdup ($<sval>4);
                            sti->CmpName  = strdup ($<sval>5);
                            sti->Prob     = $<rval>6; }
;

/*--------------- Input for the REPORT structure ------------*/

report: TK_REPORT { report = makereport (); } reportvars TK_END_REPORT
;

reportvars: reportvar 
          | reportvars reportvar
;

reportvar: TK_TYPE       NAME    { report->L.name    = strdup ($<sval>2); }
         | TK_CELLS      NAME NAME NAME NAME
                                 { report->ColName   = strdup ($<sval>2);
                                   report->LayName   = strdup ($<sval>3);
                                   report->CellName  = strdup ($<sval>4);
                                   report->CmpName   = strdup ($<sval>5); }
         | TK_FILENAME   NAME    { report->FileName  = strdup ($<sval>2); }
         | TK_PORT       INTEGER { report->Port      = $<ival>2; }
         | TK_PORT       TK_AUTO { report->Port      = -1; }
         | TK_ASCII              { report->ASCII     = TRUE; }
         | TK_ASCII      TK_EXP  { report->reportFlag |= 1;
                                   report->ASCII     = TRUE; }
         | TK_CHANNEL    NAME    { report->ReportOn  = ReportCode ("CHANNEL_RPT");
                                   report->Name      = strdup ($<sval>2); 
                                   printf ("Report Channel: code = %x, name = '%s'\n", report->ReportOn, report->Name); }
         | TK_REPORT_ON  NAME    { report->ReportOn  = ReportCode ($<sval>2); }
         | TK_CELL_SEQUENCE NAME { report->CellSequence = CellSequenceCode ($<sval>2); }
         | TK_PROB       value   { report->Prob      = $<rval>2; }
         | TK_FREQUENCY  value   { report->Frequency = $<rval>2; }
         | TK_TIME_START { nval = 0; } values 
                                 { report->nTStart = nval;
                                   report->TStart  = allocVlist (nval, vlist); }
         | TK_TIME_END   { nval = 0; } values 
                                 { report->nTStop  = nval;
                                   report->TStop   = allocVlist (nval, vlist); }
         | TK_SYNAPSE    NAME    { report->ReportOn = ReportCode ("SYNAPSE_USE");
                                   report->Name     = strdup ($<sval>2); }
         | TK_SYNAPSE_RSE NAME   {
                                   report->ReportOn = ReportCode ("SYNAPSE_RSE");
                                   report->Name     = strdup ($<sval>2);
                                 }
         | TK_SYNAPSE_UF  NAME   {
                                   report->ReportOn = ReportCode ("SYNAPSE_UF");
                                   report->Name     = strdup ($<sval>2);
                                 }
         | TK_SYN_AUGMENTATION NAME  {
                                       report->ReportOn = ReportCode ("SYNAPSE_SA");
                                       report->Name     = strdup ($<sval>2);
                                     }
         | TK_SYN_CALCIUM NAME       {
                                       report->ReportOn = ReportCode ("SYNAPSE_CA");
                                       report->Name     = strdup ($<sval>2);
                                     }
         | TK_SEED INTEGER       { report->Seed = $<ival>2; }
         | TK_SEED TK_SELECT_FRONT  { report->Seed = SELECT_FRONT; }
         | TK_VERSION INTEGER    { report->reportFlag |= $<ival>2; }
         | TK_OPTION reportoptions { }
;

event: TK_EVENT { event = makeevent(); } eventvars TK_END_EVENT
;

eventvars: eventvar
    | eventvars eventvar
;

eventvar: TK_TYPE NAME { event->L.name = strdup( $<sval>2 ); }
    | TK_SYNAPSE NAME { event->synapseName = strdup( $<sval>2 ); }
    | TK_CELLS NAME NAME NAME NAME { 
            event->cellGroupNames[0] = strdup( $<sval>2 );
            event->cellGroupNames[1] = strdup( $<sval>3 );
            event->cellGroupNames[2] = strdup( $<sval>4 );
            event->cellGroupNames[3] = strdup( $<sval>5 );
        }
    | TK_OVERRIDE NAME value { event->file = strdup( $<sval>2 ); event->time = $<rval>3; }
;

/* -------------Input for the Option of Report---------------------------------*/
reportoptions: singleoption
             | reportoptions singleoption
;

singleoption: TK_AVERAGE_SYN { report->reportFlag |= AVERAGE_SYN; }
            | TK_HIDE_TIMESTEP { report->reportFlag |= HIDE_STEP; }
;

/*--------------- These rules collect a list of numeric values ------------*/

values: value         { if (nval < VSIZE) vlist [nval++] = $<rval>1; }
      | values value  { if (nval < VSIZE) vlist [nval++] = $<rval>2; }
;

twovalue: value value  { twoPtr = new MeanStdev( $<rval>1 , $<rval>2 ); }
        | value        { twoPtr = new MeanStdev( $<rval>1 , 0.0 ); }
;

value: INTEGER { $<rval>$ = (double) $<ival>1; }
     | REAL    { $<rval>$ = $<rval>1; }
;

%%

//Brain Stuff
public Brain brain;

public ArrayList<ColumnShell> columnShellList;
public ArrayList<Column> columnList;

public ArrayList<LayerShell> layerShellList;
public ArrayList<LayerShell> layerList;

public ArrayList<Cell> cellList;
public ArrayList<Compartment> compartmentList;

public ArrayList<Channel> channelList;

public ArrayList<Synapse> synapseList;

//For all those pesky mean/stdev values
protected MeanStdev twoPtr;

int yywrap() {

}

int multiInput() {

}
