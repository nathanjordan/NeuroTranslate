//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.09.13 at 04:28:34 PM PDT 
//


package org.morphml.channelml.schema;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for CoreEquationType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="CoreEquationType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="exponential"/>
 *     &lt;enumeration value="sigmoid"/>
 *     &lt;enumeration value="exp_linear"/>
 *     &lt;enumeration value="generic"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "CoreEquationType")
@XmlEnum
public enum CoreEquationType {


    /**
     * Of the form: A * exp((v-V1/2)/B)
     * 
     */
    @XmlEnumValue("exponential")
    EXPONENTIAL("exponential"),

    /**
     * Of the form: A / (1 + exp((v-V1/2)/B))
     * 
     */
    @XmlEnumValue("sigmoid")
    SIGMOID("sigmoid"),

    /**
     * Of the form: A * ((v-V1/2)/B) / (1 - exp(-((v-V1/2)/B)))
     * 
     */
    @XmlEnumValue("exp_linear")
    EXP_LINEAR("exp_linear"),

    /**
     * A generic expression for the rates. etc. in the expr attribute. 
     *                     If possible the expression should be fit into one of the standard forms above (e.g. exponential, etc.)
     * 
     */
    @XmlEnumValue("generic")
    GENERIC("generic");
    private final String value;

    CoreEquationType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static CoreEquationType fromValue(String v) {
        for (CoreEquationType c: CoreEquationType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
