/* The following code was generated by JFlex 1.4.3 on 3/7/12 7:55 PM */



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/7/12 7:55 PM from the specification file
 * <tt>scan.jflex</tt>
 */
class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\53\1\6\2\0\1\53\22\0\1\53\2\0\1\5\7\0"+
    "\1\4\1\0\1\7\1\10\1\2\12\1\4\0\1\2\2\0\1\11"+
    "\1\12\1\24\1\31\1\20\1\25\1\33\1\23\1\32\1\41\1\37"+
    "\1\15\1\27\1\30\1\14\1\22\1\40\1\26\1\13\1\17\1\16"+
    "\1\35\1\42\1\36\1\34\1\2\4\0\1\21\1\0\1\44\1\2"+
    "\1\51\1\52\1\3\2\2\1\45\1\50\3\2\1\43\1\47\1\2"+
    "\1\46\12\2\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\0\1\3\30\2\1\3\1\2"+
    "\1\4\70\2\1\5\1\2\1\6\14\2\1\7\1\10"+
    "\4\2\1\4\23\2\1\11\24\2\1\12\25\2\1\13"+
    "\3\2\1\14\24\2\1\15\6\2\1\16\5\2\1\17"+
    "\6\2\1\20\4\2\1\21\11\2\1\22\13\2\1\23"+
    "\6\2\1\24\1\2\1\25\17\2\1\26\5\2\1\27"+
    "\7\2\1\30\22\2\1\31\4\2\1\32\1\33\5\2"+
    "\1\34\27\2\1\35\1\2\1\36\3\2\1\37\16\2"+
    "\1\40\24\2\1\41\17\2\1\42\5\2\1\43\15\2"+
    "\1\44\1\2\1\45\16\2\1\46\5\2\1\47\11\2"+
    "\1\50\17\2\1\51\23\2\1\52\5\2\1\53\4\2"+
    "\1\54\1\55\17\2\1\56\20\2\1\57\5\2\1\60"+
    "\5\2\1\61\17\2\1\62\1\63\2\2\1\64\41\2"+
    "\1\65\6\2\1\66\1\2\1\67\13\2\1\70\3\2"+
    "\1\71\17\2\1\72\11\2\1\73\2\2\1\74\11\2"+
    "\1\75\1\76\1\2\1\77\1\100\16\2\1\101\3\2"+
    "\1\102\1\2\1\103\11\2\1\104\13\2\1\105\2\2"+
    "\1\106\4\2\1\107\27\2\1\110\1\2\1\111\12\2"+
    "\1\112\1\113\1\114\4\2\1\115\7\2\1\116\5\2"+
    "\1\117\5\2\1\120\1\121\20\2\1\122\2\2\1\123"+
    "\1\124\3\2\1\125\10\2\1\126\1\127\11\2\1\130"+
    "\21\2\1\131\1\132\1\133\1\2\1\134\1\135\1\2"+
    "\1\136\5\2\1\137\4\2\1\140\21\2\1\141\2\2"+
    "\1\142\11\2\1\143\7\2\1\144\13\2\1\145\2\2"+
    "\1\146\25\2\1\147\1\150\2\2\1\151\4\2\1\152"+
    "\1\153\2\2\1\154\6\2\1\155\6\2\1\156\2\2"+
    "\1\157\2\2\1\160\4\2\1\161\1\162\12\2\1\163"+
    "\2\2\1\164\5\2\1\165\2\2\1\166\6\2\1\167"+
    "\3\2\1\170\1\171\1\2\1\172\1\173\10\2\1\174"+
    "\4\2\1\175\7\2\1\176\1\2\1\177\1\2\1\200"+
    "\1\2\1\201\1\2\1\202\3\2\1\203\1\2\1\204"+
    "\1\2\1\205\1\206\1\207\4\2\1\210\12\2\1\211"+
    "\1\2\1\212\1\213\1\214\10\2\1\215\2\2\1\216"+
    "\15\2\1\217\15\2\1\220\5\2\1\221\5\2\1\222"+
    "\1\223\6\2\1\224\1\225\1\226\1\77\5\2\1\227"+
    "\2\2\1\230\1\2\1\231\10\2\1\232\4\2\1\233"+
    "\1\234\5\2\1\235\12\2\1\236\1\237\11\2\1\240"+
    "\1\2\1\241\4\2\1\242\10\2\1\243\1\244\1\2"+
    "\1\245\5\2\1\246\2\2\1\247\3\2\1\250\1\2"+
    "\1\251\2\2\1\252\4\2\1\253\10\2\1\254\3\2"+
    "\1\255\5\2\1\256\3\2\1\257\1\2\1\260\6\2"+
    "\1\261\3\2\1\262\1\263\1\264\4\2\1\265\1\2"+
    "\1\266\6\2\1\267\1\270\2\2\1\271\3\2\1\272"+
    "\1\2\1\273\1\274\2\2\1\275\1\276\1\277\1\300"+
    "\1\301\5\2\1\302\2\2\1\303\1\304\1\305\1\306";

  private static int [] zzUnpackAction() {
    int [] result = new int[1316];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4"+
    "\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554"+
    "\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4"+
    "\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814"+
    "\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974"+
    "\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4"+
    "\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34"+
    "\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94"+
    "\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4"+
    "\0\130\0\u0f20\0\130\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc"+
    "\0\u1028\0\u1054\0\u1080\0\u10ac\0\u10d8\0\u1104\0\u1130\0\130"+
    "\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1238\0\u1264"+
    "\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4"+
    "\0\u13f0\0\u141c\0\u1448\0\u1474\0\u14a0\0\u14cc\0\u14f8\0\u1524"+
    "\0\u1550\0\u157c\0\u15a8\0\u15d4\0\u1600\0\u162c\0\u1658\0\u1684"+
    "\0\u16b0\0\u16dc\0\u1708\0\u1734\0\u1760\0\u178c\0\u17b8\0\u17e4"+
    "\0\u1810\0\u183c\0\u1868\0\u1894\0\u18c0\0\u18ec\0\130\0\u1918"+
    "\0\u1944\0\u1970\0\u199c\0\u19c8\0\u19f4\0\u1a20\0\u1a4c\0\u1a78"+
    "\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\u1b80\0\u1bac\0\u1bd8"+
    "\0\u1c04\0\u1c30\0\u1c5c\0\u1c88\0\130\0\u1cb4\0\u1ce0\0\u1d0c"+
    "\0\u1d38\0\u1d64\0\u1d90\0\u1dbc\0\u1de8\0\u1e14\0\u1e40\0\u1e6c"+
    "\0\u1e98\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48\0\u1f74\0\u1fa0\0\u1fcc"+
    "\0\u1ff8\0\u2024\0\u2050\0\u207c\0\u20a8\0\130\0\u20d4\0\u2100"+
    "\0\u212c\0\u2158\0\u2184\0\u21b0\0\130\0\u21dc\0\u2208\0\u2234"+
    "\0\u2260\0\u228c\0\130\0\u22b8\0\u22e4\0\u2310\0\u233c\0\u2368"+
    "\0\u2394\0\u23c0\0\u23ec\0\u2418\0\u2444\0\u2470\0\130\0\u249c"+
    "\0\u24c8\0\u24f4\0\u2520\0\u254c\0\u2578\0\u25a4\0\u25d0\0\u25fc"+
    "\0\130\0\u2628\0\u2654\0\u2680\0\u26ac\0\u26d8\0\u2704\0\u2730"+
    "\0\u275c\0\u2788\0\u27b4\0\u27e0\0\130\0\u280c\0\u2838\0\u2864"+
    "\0\u2890\0\u28bc\0\u28e8\0\130\0\u2914\0\130\0\u2940\0\u296c"+
    "\0\u2998\0\u29c4\0\u29f0\0\u2a1c\0\u2a48\0\u2a74\0\u2aa0\0\u2acc"+
    "\0\u2af8\0\u2b24\0\u2b50\0\u2b7c\0\u2ba8\0\u2bd4\0\u2c00\0\u2c2c"+
    "\0\u2c58\0\u2c84\0\u2cb0\0\130\0\u2cdc\0\u2d08\0\u2d34\0\u2d60"+
    "\0\u2d8c\0\u2db8\0\u2de4\0\130\0\u2e10\0\u2e3c\0\u2e68\0\u2e94"+
    "\0\u2ec0\0\u2eec\0\u2f18\0\u2f44\0\u2f70\0\u2f9c\0\u2fc8\0\u2ff4"+
    "\0\u3020\0\u304c\0\u3078\0\u30a4\0\u30d0\0\u30fc\0\130\0\u3128"+
    "\0\u3154\0\u3180\0\u31ac\0\130\0\u31d8\0\u3204\0\u3230\0\u325c"+
    "\0\u3288\0\u32b4\0\130\0\u32e0\0\u330c\0\u3338\0\u3364\0\u3390"+
    "\0\u33bc\0\u33e8\0\u3414\0\u3440\0\u346c\0\u3498\0\u34c4\0\u34f0"+
    "\0\u351c\0\u3548\0\u3574\0\u35a0\0\u35cc\0\u35f8\0\u3624\0\u3650"+
    "\0\u367c\0\u36a8\0\u36d4\0\u3700\0\130\0\u372c\0\u3758\0\u3784"+
    "\0\130\0\u37b0\0\u37dc\0\u3808\0\u3834\0\u3860\0\u388c\0\u38b8"+
    "\0\u38e4\0\u3910\0\u393c\0\u3968\0\u3994\0\u39c0\0\u39ec\0\130"+
    "\0\u3a18\0\u3a44\0\u3a70\0\u3a9c\0\u3ac8\0\u3af4\0\u3b20\0\u3b4c"+
    "\0\u3b78\0\u3ba4\0\u3bd0\0\u3bfc\0\u3c28\0\u3c54\0\u3c80\0\u3cac"+
    "\0\u3cd8\0\u3d04\0\u3d30\0\u3d5c\0\u3d88\0\u3db4\0\u3de0\0\u3e0c"+
    "\0\u3e38\0\u3e64\0\u3e90\0\u3ebc\0\u3ee8\0\u3f14\0\u3f40\0\u3f6c"+
    "\0\u3f98\0\u3fc4\0\u3ff0\0\u401c\0\130\0\u4048\0\u4074\0\u40a0"+
    "\0\u40cc\0\u40f8\0\130\0\u4124\0\u4150\0\u417c\0\u41a8\0\u41d4"+
    "\0\u4200\0\u422c\0\u4258\0\u4284\0\u42b0\0\u42dc\0\u4308\0\u4334"+
    "\0\130\0\u4360\0\130\0\u438c\0\u43b8\0\u43e4\0\u4410\0\u443c"+
    "\0\u4468\0\u4494\0\u44c0\0\u44ec\0\u4518\0\u4544\0\u4570\0\u459c"+
    "\0\u45c8\0\u45f4\0\u4620\0\u464c\0\u4678\0\u46a4\0\u46d0\0\130"+
    "\0\u46fc\0\u4728\0\u4754\0\u4780\0\u47ac\0\u47d8\0\u4804\0\u4830"+
    "\0\u485c\0\130\0\u4888\0\u48b4\0\u48e0\0\u490c\0\u4938\0\u4964"+
    "\0\u4990\0\u49bc\0\u49e8\0\u4a14\0\u4a40\0\u4a6c\0\u4a98\0\u4ac4"+
    "\0\u4af0\0\130\0\u4b1c\0\u4b48\0\u4b74\0\u4ba0\0\u4bcc\0\u4bf8"+
    "\0\u4c24\0\u4c50\0\u4c7c\0\u4ca8\0\u4cd4\0\u4d00\0\u4d2c\0\u4d58"+
    "\0\u4d84\0\u4db0\0\u4ddc\0\u4e08\0\u4e34\0\130\0\u4e60\0\u4e8c"+
    "\0\u4eb8\0\u4ee4\0\u4f10\0\u4f3c\0\u4f68\0\u4f94\0\u4fc0\0\u4fec"+
    "\0\u5018\0\130\0\u5044\0\u5070\0\u509c\0\u50c8\0\u50f4\0\u5120"+
    "\0\u514c\0\u5178\0\u51a4\0\u51d0\0\u51fc\0\u5228\0\u5254\0\u5280"+
    "\0\u52ac\0\u52d8\0\u5304\0\u5330\0\u535c\0\u5388\0\u53b4\0\u53e0"+
    "\0\u540c\0\u5438\0\u5464\0\u5490\0\u54bc\0\u54e8\0\u5514\0\u5540"+
    "\0\u556c\0\u5598\0\130\0\u55c4\0\u55f0\0\u561c\0\u5648\0\u5674"+
    "\0\130\0\u56a0\0\u56cc\0\u56f8\0\u5724\0\u5750\0\130\0\u577c"+
    "\0\u57a8\0\u57d4\0\u5800\0\u582c\0\u5858\0\u5884\0\u58b0\0\u58dc"+
    "\0\u5908\0\u5934\0\u5960\0\u598c\0\u59b8\0\u59e4\0\130\0\u5a10"+
    "\0\u5a3c\0\u5a68\0\130\0\u5a94\0\u5ac0\0\u5aec\0\u5b18\0\u5b44"+
    "\0\u5b70\0\u5b9c\0\u5bc8\0\u5bf4\0\u5c20\0\u5c4c\0\u5c78\0\u5ca4"+
    "\0\u5cd0\0\u5cfc\0\u5d28\0\u5d54\0\u5d80\0\u5dac\0\u5dd8\0\u5e04"+
    "\0\u5e30\0\u5e5c\0\u5e88\0\u5eb4\0\u5ee0\0\u5f0c\0\u5f38\0\u5f64"+
    "\0\u5f90\0\u5fbc\0\u5fe8\0\u6014\0\130\0\u6040\0\u606c\0\u6098"+
    "\0\u60c4\0\u60f0\0\u611c\0\130\0\u6148\0\130\0\u6174\0\u61a0"+
    "\0\u61cc\0\u61f8\0\u6224\0\u6250\0\u627c\0\u62a8\0\u62d4\0\u6300"+
    "\0\u632c\0\u6358\0\u6384\0\u63b0\0\u63dc\0\130\0\u6408\0\u6434"+
    "\0\u6460\0\u648c\0\u64b8\0\u64e4\0\u6510\0\u653c\0\u6568\0\u6594"+
    "\0\u65c0\0\u65ec\0\u6618\0\u6644\0\u6670\0\130\0\u669c\0\u66c8"+
    "\0\u66f4\0\u6720\0\u674c\0\u6778\0\u67a4\0\u67d0\0\u67fc\0\130"+
    "\0\u6828\0\u6854\0\130\0\u6880\0\u68ac\0\u68d8\0\u6904\0\u6930"+
    "\0\u695c\0\u6988\0\u69b4\0\u69e0\0\130\0\130\0\u6a0c\0\u6a38"+
    "\0\u6a64\0\u6a90\0\u6abc\0\u6ae8\0\u6b14\0\u6b40\0\u6b6c\0\u6b98"+
    "\0\u6bc4\0\u6bf0\0\u6c1c\0\u6c48\0\u6c74\0\u6ca0\0\u6ccc\0\130"+
    "\0\u6cf8\0\u6d24\0\u6d50\0\130\0\u6d7c\0\u6da8\0\u6dd4\0\u6e00"+
    "\0\u6e2c\0\u6e58\0\u6e84\0\u6eb0\0\u6edc\0\u6f08\0\u6f34\0\130"+
    "\0\u6f60\0\u6f8c\0\u6fb8\0\u6fe4\0\u7010\0\u703c\0\u7068\0\u7094"+
    "\0\u70c0\0\u70ec\0\u7118\0\130\0\u7144\0\u7170\0\130\0\u719c"+
    "\0\u71c8\0\u71f4\0\u7220\0\130\0\u724c\0\u7278\0\u72a4\0\u72d0"+
    "\0\u72fc\0\u7328\0\u7354\0\u7380\0\u73ac\0\u73d8\0\u7404\0\u7430"+
    "\0\u745c\0\u7488\0\u74b4\0\u74e0\0\u750c\0\u7538\0\u7564\0\u7590"+
    "\0\u75bc\0\u75e8\0\u7614\0\130\0\u7640\0\130\0\u766c\0\u7698"+
    "\0\u76c4\0\u76f0\0\u771c\0\u7748\0\u7774\0\u77a0\0\u77cc\0\u77f8"+
    "\0\130\0\130\0\130\0\u7824\0\u7850\0\u787c\0\u78a8\0\130"+
    "\0\u78d4\0\u7900\0\u792c\0\u7958\0\u7984\0\u79b0\0\u79dc\0\130"+
    "\0\u7a08\0\u7a34\0\u7a60\0\u7a8c\0\u7ab8\0\130\0\u7ae4\0\u7b10"+
    "\0\u7b3c\0\u7b68\0\u7b94\0\130\0\130\0\u7bc0\0\u7bec\0\u7c18"+
    "\0\u7c44\0\u7c70\0\u7c9c\0\u7cc8\0\u7cf4\0\u7d20\0\u7d4c\0\u7d78"+
    "\0\u7da4\0\u7dd0\0\u7dfc\0\u7e28\0\u7e54\0\130\0\u7e80\0\u7eac"+
    "\0\130\0\130\0\u7ed8\0\u7f04\0\u7f30\0\130\0\u7f5c\0\u7f88"+
    "\0\u7fb4\0\u7fe0\0\u800c\0\u8038\0\u8064\0\u8090\0\u80bc\0\130"+
    "\0\u80e8\0\u8114\0\u8140\0\u816c\0\u8198\0\u81c4\0\u81f0\0\u821c"+
    "\0\u8248\0\130\0\u8274\0\u82a0\0\u82cc\0\u82f8\0\u8324\0\u8350"+
    "\0\u837c\0\u83a8\0\u83d4\0\u8400\0\u842c\0\u8458\0\u8484\0\u84b0"+
    "\0\u84dc\0\u8508\0\u8534\0\130\0\130\0\130\0\u8560\0\130"+
    "\0\130\0\u858c\0\130\0\u85b8\0\u85e4\0\u8610\0\u863c\0\u8668"+
    "\0\130\0\u8694\0\u86c0\0\u86ec\0\u8718\0\130\0\u8744\0\u8770"+
    "\0\u879c\0\u87c8\0\u87f4\0\u8820\0\u884c\0\u8878\0\u88a4\0\u88d0"+
    "\0\u88fc\0\u8928\0\u8954\0\u8980\0\u89ac\0\u89d8\0\u8a04\0\130"+
    "\0\u8a30\0\u8a5c\0\130\0\u8a88\0\u8ab4\0\u8ae0\0\u8b0c\0\u8b38"+
    "\0\u8b64\0\u8b90\0\u8bbc\0\u8be8\0\130\0\u8c14\0\u8c40\0\u8c6c"+
    "\0\u8c98\0\u8cc4\0\u8cf0\0\u8d1c\0\130\0\u8d48\0\u8d74\0\u8da0"+
    "\0\u8dcc\0\u8df8\0\u8e24\0\u8e50\0\u8e7c\0\u8ea8\0\u8ed4\0\u8f00"+
    "\0\u8f2c\0\u8f58\0\u8f84\0\130\0\u8fb0\0\u8fdc\0\u9008\0\u9034"+
    "\0\u9060\0\u908c\0\u90b8\0\u90e4\0\u9110\0\u913c\0\u9168\0\u9194"+
    "\0\u91c0\0\u91ec\0\u9218\0\u9244\0\u9270\0\u929c\0\u92c8\0\u92f4"+
    "\0\u9320\0\130\0\130\0\u934c\0\u9378\0\130\0\u93a4\0\u93d0"+
    "\0\u93fc\0\u9428\0\130\0\130\0\u9454\0\u9480\0\130\0\u94ac"+
    "\0\u94d8\0\u9504\0\u9530\0\u955c\0\u9588\0\130\0\u95b4\0\u95e0"+
    "\0\u960c\0\u9638\0\u9664\0\u9690\0\130\0\u96bc\0\u96e8\0\130"+
    "\0\u9714\0\u9740\0\130\0\u976c\0\u9798\0\u97c4\0\u97f0\0\130"+
    "\0\130\0\u981c\0\u9848\0\u9874\0\u98a0\0\u98cc\0\u98f8\0\u9924"+
    "\0\u9950\0\u997c\0\u99a8\0\130\0\u99d4\0\u9a00\0\130\0\u9a2c"+
    "\0\u9a58\0\u9a84\0\u9ab0\0\u9adc\0\130\0\u9b08\0\u9b34\0\130"+
    "\0\u9b60\0\u9b8c\0\u9bb8\0\u9be4\0\u9c10\0\u9c3c\0\130\0\u9c68"+
    "\0\u9c94\0\u9cc0\0\130\0\130\0\u9cec\0\130\0\130\0\u9d18"+
    "\0\u9d44\0\u9d70\0\u9d9c\0\u9dc8\0\u9df4\0\u9e20\0\u9e4c\0\130"+
    "\0\u9e78\0\u9ea4\0\u9ed0\0\u9efc\0\130\0\u9f28\0\u9f54\0\u9f80"+
    "\0\u9fac\0\u9fd8\0\ua004\0\ua030\0\130\0\ua05c\0\130\0\ua088"+
    "\0\130\0\ua0b4\0\130\0\ua0e0\0\130\0\ua10c\0\ua138\0\ua164"+
    "\0\130\0\ua190\0\130\0\ua1bc\0\130\0\130\0\ua1e8\0\ua214"+
    "\0\ua240\0\ua26c\0\ua298\0\130\0\ua2c4\0\ua2f0\0\ua31c\0\ua348"+
    "\0\ua374\0\ua3a0\0\ua3cc\0\ua3f8\0\ua424\0\ua450\0\130\0\ua47c"+
    "\0\130\0\130\0\130\0\ua4a8\0\ua4d4\0\ua500\0\ua52c\0\ua558"+
    "\0\ua584\0\ua5b0\0\ua5dc\0\130\0\ua608\0\ua634\0\130\0\ua660"+
    "\0\ua68c\0\ua6b8\0\ua6e4\0\ua710\0\ua73c\0\ua768\0\ua794\0\ua7c0"+
    "\0\ua7ec\0\ua818\0\ua844\0\ua870\0\130\0\ua89c\0\ua8c8\0\ua8f4"+
    "\0\ua920\0\ua94c\0\ua978\0\ua9a4\0\ua9d0\0\ua9fc\0\uaa28\0\uaa54"+
    "\0\uaa80\0\uaaac\0\130\0\uaad8\0\uab04\0\uab30\0\uab5c\0\uab88"+
    "\0\130\0\uabb4\0\uabe0\0\uac0c\0\uac38\0\uac64\0\uac90\0\uacbc"+
    "\0\uace8\0\uad14\0\uad40\0\uad6c\0\uad98\0\uadc4\0\uadf0\0\uae1c"+
    "\0\130\0\130\0\uae48\0\uae74\0\uaea0\0\uaecc\0\uaef8\0\130"+
    "\0\uaf24\0\uaf50\0\130\0\uaf7c\0\130\0\uafa8\0\uafd4\0\ub000"+
    "\0\ub02c\0\ub058\0\ub084\0\ub0b0\0\ub0dc\0\130\0\ub108\0\ub134"+
    "\0\ub160\0\ub18c\0\130\0\130\0\ub1b8\0\ub1e4\0\ub210\0\ub23c"+
    "\0\ub268\0\130\0\ub294\0\ub2c0\0\ub2ec\0\ub318\0\ub344\0\ub370"+
    "\0\ub39c\0\ub3c8\0\ub3f4\0\ub420\0\130\0\130\0\ub44c\0\ub478"+
    "\0\ub4a4\0\ub4d0\0\ub4fc\0\ub528\0\ub554\0\ub580\0\ub5ac\0\130"+
    "\0\ub5d8\0\130\0\ub604\0\ub630\0\ub65c\0\ub688\0\130\0\ub6b4"+
    "\0\ub6e0\0\ub70c\0\ub738\0\ub764\0\ub790\0\ub7bc\0\ub7e8\0\ub814"+
    "\0\ub840\0\ub86c\0\130\0\ub898\0\ub8c4\0\ub8f0\0\ub91c\0\ub948"+
    "\0\130\0\ub974\0\ub9a0\0\130\0\ub9cc\0\ub9f8\0\uba24\0\130"+
    "\0\uba50\0\130\0\uba7c\0\ubaa8\0\130\0\ubad4\0\ubb00\0\ubb2c"+
    "\0\ubb58\0\130\0\ubb84\0\ubbb0\0\ubbdc\0\ubc08\0\ubc34\0\ubc60"+
    "\0\ubc8c\0\ubcb8\0\130\0\ubce4\0\ubd10\0\ubd3c\0\130\0\ubd68"+
    "\0\ubd94\0\ubdc0\0\ubdec\0\ube18\0\130\0\ube44\0\ube70\0\ube9c"+
    "\0\130\0\ubec8\0\130\0\ubef4\0\ubf20\0\ubf4c\0\ubf78\0\ubfa4"+
    "\0\ubfd0\0\130\0\ubffc\0\uc028\0\uc054\0\130\0\130\0\130"+
    "\0\uc080\0\uc0ac\0\uc0d8\0\uc104\0\130\0\uc130\0\130\0\uc15c"+
    "\0\uc188\0\uc1b4\0\uc1e0\0\uc20c\0\uc238\0\130\0\130\0\uc264"+
    "\0\uc290\0\130\0\uc2bc\0\uc2e8\0\uc314\0\130\0\uc340\0\130"+
    "\0\130\0\uc36c\0\uc398\0\130\0\130\0\130\0\130\0\130"+
    "\0\uc3c4\0\uc3f0\0\uc41c\0\uc448\0\uc474\0\130\0\uc4a0\0\uc4cc"+
    "\0\130\0\130\0\130\0\130";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1316];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\3\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\3"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\3\1\31\1\32\1\3\1\33\1\3\1\34"+
    "\1\35\10\3\1\36\1\0\1\2\1\3\1\37\1\3"+
    "\2\0\1\3\1\40\7\3\1\37\32\3\2\0\4\3"+
    "\2\0\44\3\1\0\6\4\1\5\45\4\55\0\1\2"+
    "\3\3\2\0\1\3\1\7\42\3\2\0\1\40\3\3"+
    "\2\0\44\3\2\0\4\3\2\0\3\3\1\41\1\42"+
    "\1\3\1\43\1\44\10\3\1\45\5\3\1\46\15\3"+
    "\2\0\4\3\2\0\11\3\1\47\5\3\1\50\24\3"+
    "\2\0\4\3\2\0\2\3\1\51\3\3\1\52\1\3"+
    "\1\53\1\54\1\3\1\55\2\3\1\56\4\3\1\57"+
    "\1\3\1\60\16\3\2\0\4\3\2\0\7\3\1\61"+
    "\3\3\1\62\30\3\2\0\4\3\2\0\2\3\1\63"+
    "\2\3\1\64\3\3\1\65\32\3\2\0\4\3\2\0"+
    "\4\3\1\66\6\3\1\67\5\3\1\70\22\3\2\0"+
    "\4\3\2\0\2\3\1\71\11\3\1\72\2\3\1\73"+
    "\3\3\1\74\1\3\1\75\16\3\2\0\4\3\2\0"+
    "\12\3\1\76\6\3\1\77\4\3\1\100\1\101\14\3"+
    "\2\0\4\3\2\0\2\3\1\102\1\3\1\103\1\104"+
    "\6\3\1\105\2\3\1\106\24\3\2\0\4\3\2\0"+
    "\11\3\1\107\1\110\10\3\1\111\20\3\2\0\4\3"+
    "\2\0\2\3\1\112\2\3\1\113\3\3\1\114\2\3"+
    "\1\115\27\3\2\0\4\3\2\0\2\3\1\116\1\3"+
    "\1\117\12\3\1\120\3\3\1\121\20\3\2\0\4\3"+
    "\2\0\2\3\1\122\1\3\1\123\4\3\1\124\1\125"+
    "\31\3\2\0\4\3\2\0\2\3\1\126\2\3\1\127"+
    "\4\3\1\130\31\3\2\0\4\3\2\0\5\3\1\131"+
    "\3\3\1\132\23\3\1\133\6\3\2\0\4\3\2\0"+
    "\2\3\1\134\4\3\1\135\1\3\1\136\11\3\1\137"+
    "\1\3\1\140\16\3\2\0\4\3\2\0\21\3\1\141"+
    "\2\3\1\142\17\3\2\0\4\3\2\0\11\3\1\143"+
    "\32\3\2\0\4\3\2\0\5\3\1\144\3\3\1\145"+
    "\1\146\5\3\1\147\23\3\2\0\4\3\2\0\34\3"+
    "\1\150\1\151\2\3\1\152\3\3\2\0\4\3\2\0"+
    "\5\3\1\153\36\3\2\0\4\3\2\0\2\3\1\154"+
    "\20\3\1\155\20\3\54\0\1\36\1\0\1\156\2\3"+
    "\1\157\2\0\1\157\43\3\2\0\1\40\1\3\1\37"+
    "\1\3\2\0\11\3\1\37\32\3\2\0\4\3\2\0"+
    "\4\3\1\160\37\3\2\0\4\3\2\0\15\3\1\161"+
    "\26\3\2\0\4\3\2\0\13\3\1\162\30\3\2\0"+
    "\4\3\2\0\10\3\1\163\13\3\1\164\17\3\2\0"+
    "\4\3\2\0\13\3\1\165\30\3\2\0\4\3\2\0"+
    "\11\3\1\166\32\3\2\0\4\3\2\0\10\3\1\167"+
    "\33\3\2\0\4\3\2\0\2\3\1\170\41\3\2\0"+
    "\4\3\2\0\20\3\1\171\5\3\1\172\15\3\2\0"+
    "\4\3\2\0\5\3\1\173\36\3\2\0\4\3\2\0"+
    "\17\3\1\174\3\3\1\175\20\3\2\0\4\3\2\0"+
    "\6\3\1\176\2\3\1\177\5\3\1\200\24\3\2\0"+
    "\4\3\2\0\23\3\1\201\20\3\2\0\4\3\2\0"+
    "\22\3\1\202\21\3\2\0\4\3\2\0\21\3\1\203"+
    "\22\3\2\0\4\3\2\0\21\3\1\204\22\3\2\0"+
    "\4\3\2\0\10\3\1\205\33\3\2\0\4\3\2\0"+
    "\10\3\1\206\33\3\2\0\4\3\2\0\25\3\1\207"+
    "\16\3\2\0\4\3\2\0\2\3\1\210\12\3\1\211"+
    "\15\3\1\212\10\3\2\0\4\3\2\0\2\3\1\213"+
    "\41\3\2\0\4\3\2\0\11\3\1\214\32\3\2\0"+
    "\4\3\2\0\13\3\1\215\30\3\2\0\4\3\2\0"+
    "\23\3\1\216\20\3\2\0\4\3\2\0\7\3\1\217"+
    "\34\3\2\0\4\3\2\0\17\3\1\220\24\3\2\0"+
    "\4\3\2\0\7\3\1\221\34\3\2\0\4\3\2\0"+
    "\20\3\1\222\23\3\2\0\4\3\2\0\13\3\1\223"+
    "\30\3\2\0\4\3\2\0\14\3\1\224\27\3\2\0"+
    "\4\3\2\0\22\3\1\225\21\3\2\0\4\3\2\0"+
    "\11\3\1\226\32\3\2\0\4\3\2\0\13\3\1\227"+
    "\30\3\2\0\4\3\2\0\10\3\1\230\33\3\2\0"+
    "\4\3\2\0\24\3\1\231\17\3\2\0\4\3\2\0"+
    "\4\3\1\232\12\3\1\233\24\3\2\0\4\3\2\0"+
    "\2\3\1\234\41\3\2\0\4\3\2\0\5\3\1\235"+
    "\3\3\1\236\32\3\2\0\4\3\2\0\3\3\1\237"+
    "\17\3\1\240\20\3\2\0\4\3\2\0\13\3\1\241"+
    "\7\3\1\242\20\3\2\0\4\3\2\0\22\3\1\243"+
    "\21\3\2\0\4\3\2\0\12\3\1\244\31\3\2\0"+
    "\4\3\2\0\6\3\1\245\10\3\1\246\1\247\1\250"+
    "\22\3\2\0\4\3\2\0\6\3\1\251\35\3\2\0"+
    "\4\3\2\0\2\3\1\252\41\3\2\0\4\3\2\0"+
    "\6\3\1\253\6\3\1\254\26\3\2\0\4\3\2\0"+
    "\26\3\1\255\15\3\2\0\4\3\2\0\11\3\1\256"+
    "\32\3\2\0\4\3\2\0\6\3\1\257\35\3\2\0"+
    "\4\3\2\0\10\3\1\260\33\3\2\0\4\3\2\0"+
    "\11\3\1\261\32\3\2\0\4\3\2\0\6\3\1\262"+
    "\4\3\1\263\1\3\1\264\10\3\1\265\15\3\2\0"+
    "\4\3\2\0\20\3\1\266\23\3\2\0\4\3\2\0"+
    "\27\3\1\267\14\3\2\0\4\3\2\0\22\3\1\270"+
    "\21\3\2\0\4\3\2\0\13\3\1\271\7\3\1\272"+
    "\20\3\2\0\4\3\2\0\24\3\1\273\17\3\2\0"+
    "\4\3\2\0\10\3\1\274\33\3\2\0\4\3\2\0"+
    "\17\3\1\275\24\3\2\0\4\3\2\0\6\3\1\276"+
    "\4\3\1\277\30\3\2\0\4\3\2\0\4\3\1\300"+
    "\37\3\2\0\4\3\2\0\21\3\1\301\22\3\2\0"+
    "\4\3\2\0\10\3\1\302\4\3\1\303\14\3\1\304"+
    "\11\3\2\0\4\3\2\0\21\3\1\305\22\3\2\0"+
    "\4\3\2\0\4\3\1\306\37\3\2\0\4\3\2\0"+
    "\6\3\1\307\35\3\2\0\4\3\2\0\17\3\1\310"+
    "\24\3\2\0\4\3\2\0\10\3\1\311\33\3\2\0"+
    "\4\3\2\0\17\3\1\312\24\3\2\0\4\3\2\0"+
    "\36\3\1\313\5\3\2\0\4\3\2\0\41\3\1\314"+
    "\2\3\2\0\4\3\2\0\3\3\1\315\40\3\2\0"+
    "\4\3\2\0\17\3\1\316\24\3\2\0\4\3\2\0"+
    "\22\3\1\317\21\3\2\0\1\156\3\3\2\0\44\3"+
    "\2\0\4\3\2\0\5\3\1\320\36\3\2\0\4\3"+
    "\2\0\23\3\1\321\20\3\2\0\4\3\2\0\14\3"+
    "\1\322\27\3\2\0\4\3\2\0\5\3\1\323\36\3"+
    "\2\0\4\3\2\0\20\3\1\324\23\3\2\0\4\3"+
    "\2\0\12\3\1\325\31\3\2\0\4\3\2\0\17\3"+
    "\1\326\24\3\2\0\4\3\2\0\2\3\1\327\41\3"+
    "\2\0\4\3\2\0\23\3\1\330\20\3\2\0\4\3"+
    "\2\0\11\3\1\331\32\3\2\0\4\3\2\0\11\3"+
    "\1\332\32\3\2\0\4\3\2\0\13\3\1\333\30\3"+
    "\2\0\4\3\2\0\11\3\1\334\32\3\2\0\4\3"+
    "\2\0\20\3\1\335\23\3\2\0\4\3\2\0\11\3"+
    "\1\336\32\3\2\0\4\3\2\0\22\3\1\337\21\3"+
    "\2\0\4\3\2\0\26\3\1\340\15\3\2\0\4\3"+
    "\2\0\30\3\1\341\13\3\2\0\4\3\2\0\12\3"+
    "\1\342\31\3\2\0\4\3\2\0\24\3\1\343\17\3"+
    "\2\0\4\3\2\0\2\3\1\344\7\3\1\345\31\3"+
    "\2\0\4\3\2\0\13\3\1\346\30\3\2\0\4\3"+
    "\2\0\23\3\1\347\20\3\2\0\4\3\2\0\11\3"+
    "\1\350\32\3\2\0\4\3\2\0\22\3\1\351\21\3"+
    "\2\0\4\3\2\0\2\3\1\352\41\3\2\0\4\3"+
    "\2\0\11\3\1\353\32\3\2\0\4\3\2\0\17\3"+
    "\1\354\10\3\1\355\13\3\2\0\4\3\2\0\12\3"+
    "\1\356\31\3\2\0\4\3\2\0\11\3\1\357\32\3"+
    "\2\0\4\3\2\0\10\3\1\360\33\3\2\0\4\3"+
    "\2\0\12\3\1\361\31\3\2\0\4\3\2\0\11\3"+
    "\1\362\32\3\2\0\4\3\2\0\11\3\1\306\32\3"+
    "\2\0\4\3\2\0\11\3\1\363\11\3\1\364\20\3"+
    "\2\0\4\3\2\0\11\3\1\365\32\3\2\0\4\3"+
    "\2\0\2\3\1\366\41\3\2\0\4\3\2\0\12\3"+
    "\1\367\31\3\2\0\4\3\2\0\21\3\1\370\22\3"+
    "\2\0\4\3\2\0\10\3\1\371\33\3\2\0\4\3"+
    "\2\0\12\3\1\372\31\3\2\0\4\3\2\0\12\3"+
    "\1\373\31\3\2\0\4\3\2\0\10\3\1\374\33\3"+
    "\2\0\4\3\2\0\4\3\1\375\37\3\2\0\4\3"+
    "\2\0\3\3\1\376\40\3\2\0\4\3\2\0\26\3"+
    "\1\377\15\3\2\0\4\3\2\0\3\3\1\u0100\40\3"+
    "\2\0\4\3\2\0\24\3\1\u0101\17\3\2\0\4\3"+
    "\2\0\5\3\1\u0102\36\3\2\0\4\3\2\0\21\3"+
    "\1\u0103\22\3\2\0\4\3\2\0\11\3\1\u0104\32\3"+
    "\2\0\4\3\2\0\4\3\1\u0105\3\3\1\u0106\1\u0107"+
    "\2\3\1\u0108\6\3\1\u0109\20\3\2\0\4\3\2\0"+
    "\7\3\1\u010a\34\3\2\0\4\3\2\0\17\3\1\u010b"+
    "\24\3\2\0\4\3\2\0\13\3\1\u010c\30\3\2\0"+
    "\4\3\2\0\21\3\1\u010d\22\3\2\0\4\3\2\0"+
    "\6\3\1\u010e\35\3\2\0\4\3\2\0\21\3\1\u010f"+
    "\22\3\2\0\4\3\2\0\4\3\1\u0110\37\3\2\0"+
    "\4\3\2\0\23\3\1\u0111\20\3\2\0\4\3\2\0"+
    "\31\3\1\u0112\12\3\2\0\4\3\2\0\11\3\1\u0113"+
    "\32\3\2\0\4\3\2\0\11\3\1\u0114\32\3\2\0"+
    "\4\3\2\0\12\3\1\u0115\31\3\2\0\4\3\2\0"+
    "\5\3\1\u0116\36\3\2\0\4\3\2\0\5\3\1\u0117"+
    "\36\3\2\0\4\3\2\0\7\3\1\u0118\34\3\2\0"+
    "\4\3\2\0\11\3\1\u0119\32\3\2\0\4\3\2\0"+
    "\11\3\1\u011a\32\3\2\0\4\3\2\0\12\3\1\u011b"+
    "\31\3\2\0\4\3\2\0\11\3\1\u011c\32\3\2\0"+
    "\4\3\2\0\5\3\1\u011d\36\3\2\0\4\3\2\0"+
    "\21\3\1\u011e\22\3\2\0\4\3\2\0\12\3\1\u011f"+
    "\31\3\2\0\4\3\2\0\2\3\1\u0120\41\3\2\0"+
    "\4\3\2\0\2\3\1\u0121\41\3\2\0\4\3\2\0"+
    "\2\3\1\u0122\41\3\2\0\4\3\2\0\17\3\1\u0123"+
    "\24\3\2\0\4\3\2\0\10\3\1\u0124\33\3\2\0"+
    "\4\3\2\0\12\3\1\u0125\31\3\2\0\4\3\2\0"+
    "\11\3\1\u0126\32\3\2\0\4\3\2\0\6\3\1\u0127"+
    "\35\3\2\0\4\3\2\0\11\3\1\u0128\32\3\2\0"+
    "\4\3\2\0\5\3\1\u0129\36\3\2\0\4\3\2\0"+
    "\10\3\1\u012a\33\3\2\0\4\3\2\0\4\3\1\u012b"+
    "\3\3\1\u012c\33\3\2\0\4\3\2\0\2\3\1\u012d"+
    "\41\3\2\0\4\3\2\0\11\3\1\u012e\32\3\2\0"+
    "\4\3\2\0\37\3\1\u012f\4\3\2\0\4\3\2\0"+
    "\42\3\1\u0130\1\3\2\0\4\3\2\0\21\3\1\u0131"+
    "\22\3\2\0\4\3\2\0\10\3\1\u0132\33\3\2\0"+
    "\4\3\2\0\6\3\1\u0133\35\3\2\0\4\3\2\0"+
    "\23\3\1\u0134\20\3\2\0\4\3\2\0\2\3\1\u0135"+
    "\41\3\2\0\4\3\2\0\11\3\1\u0136\32\3\2\0"+
    "\4\3\2\0\4\3\1\u0137\4\3\1\u0138\32\3\2\0"+
    "\4\3\2\0\2\3\1\u0139\41\3\2\0\4\3\2\0"+
    "\12\3\1\u013a\31\3\2\0\4\3\2\0\21\3\1\u013b"+
    "\22\3\2\0\4\3\2\0\4\3\1\u013c\37\3\2\0"+
    "\4\3\2\0\12\3\1\u013d\31\3\2\0\4\3\2\0"+
    "\11\3\1\u013e\32\3\2\0\4\3\2\0\21\3\1\u013f"+
    "\22\3\2\0\4\3\2\0\7\3\1\u0140\2\3\1\u0141"+
    "\31\3\2\0\4\3\2\0\15\3\1\u0142\26\3\2\0"+
    "\4\3\2\0\11\3\1\u0143\32\3\2\0\4\3\2\0"+
    "\11\3\1\u0144\32\3\2\0\4\3\2\0\4\3\1\u0145"+
    "\1\3\1\u0146\2\3\1\u0147\32\3\2\0\4\3\2\0"+
    "\6\3\1\u0148\35\3\2\0\4\3\2\0\13\3\1\u0149"+
    "\30\3\2\0\4\3\2\0\2\3\1\u014a\3\3\1\u014b"+
    "\4\3\1\u014c\1\3\1\u014d\1\u014e\1\u014f\2\3\1\u0150"+
    "\21\3\2\0\4\3\2\0\7\3\1\u0151\34\3\2\0"+
    "\4\3\2\0\5\3\1\u0152\36\3\2\0\4\3\2\0"+
    "\17\3\1\u0153\24\3\2\0\4\3\2\0\10\3\1\u0154"+
    "\33\3\2\0\4\3\2\0\17\3\1\u0155\24\3\2\0"+
    "\4\3\2\0\21\3\1\u0156\22\3\2\0\4\3\2\0"+
    "\12\3\1\u0157\31\3\2\0\4\3\2\0\5\3\1\u0158"+
    "\36\3\2\0\4\3\2\0\17\3\1\u0159\24\3\2\0"+
    "\4\3\2\0\2\3\1\u015a\41\3\2\0\4\3\2\0"+
    "\4\3\1\u015b\13\3\1\u015c\1\u015d\22\3\2\0\4\3"+
    "\2\0\4\3\1\u015e\37\3\2\0\4\3\2\0\12\3"+
    "\1\u015f\31\3\2\0\4\3\2\0\21\3\1\u0160\22\3"+
    "\2\0\4\3\2\0\6\3\1\u0161\35\3\2\0\4\3"+
    "\2\0\3\3\1\u0162\1\u0163\1\3\1\u0164\2\3\1\u0165"+
    "\3\3\1\u0166\1\3\1\u0167\24\3\2\0\4\3\2\0"+
    "\10\3\1\u0168\33\3\2\0\4\3\2\0\11\3\1\u0169"+
    "\32\3\2\0\4\3\2\0\16\3\1\u016a\25\3\2\0"+
    "\4\3\2\0\14\3\1\u016b\27\3\2\0\4\3\2\0"+
    "\11\3\1\u016c\32\3\2\0\4\3\2\0\12\3\1\u016d"+
    "\31\3\2\0\4\3\2\0\12\3\1\u016e\31\3\2\0"+
    "\4\3\2\0\14\3\1\u016f\27\3\2\0\4\3\2\0"+
    "\33\3\1\u0170\10\3\2\0\4\3\2\0\23\3\1\u0171"+
    "\20\3\2\0\4\3\2\0\12\3\1\u0172\31\3\2\0"+
    "\4\3\2\0\13\3\1\u0173\1\3\1\u0174\26\3\2\0"+
    "\4\3\2\0\2\3\1\u0175\41\3\2\0\4\3\2\0"+
    "\27\3\1\u0176\14\3\2\0\4\3\2\0\2\3\1\u0177"+
    "\41\3\2\0\4\3\2\0\21\3\1\u0178\22\3\2\0"+
    "\4\3\2\0\20\3\1\u0179\23\3\2\0\4\3\2\0"+
    "\11\3\1\u017a\32\3\2\0\4\3\2\0\2\3\1\u017b"+
    "\41\3\2\0\4\3\2\0\11\3\1\u017c\32\3\2\0"+
    "\4\3\2\0\4\3\1\u017d\5\3\1\u017e\31\3\2\0"+
    "\4\3\2\0\21\3\1\u017f\22\3\2\0\4\3\2\0"+
    "\11\3\1\131\32\3\2\0\4\3\2\0\6\3\1\u0180"+
    "\35\3\2\0\4\3\2\0\7\3\1\u0181\2\3\1\u0182"+
    "\31\3\2\0\4\3\2\0\21\3\1\u0183\22\3\2\0"+
    "\4\3\2\0\6\3\1\u0184\14\3\1\u0185\20\3\2\0"+
    "\4\3\2\0\2\3\1\u0186\41\3\2\0\4\3\2\0"+
    "\17\3\1\u0187\24\3\2\0\4\3\2\0\17\3\1\u0188"+
    "\24\3\2\0\4\3\2\0\17\3\1\u0189\24\3\2\0"+
    "\4\3\2\0\20\3\1\u018a\23\3\2\0\4\3\2\0"+
    "\2\3\1\u018b\12\3\1\u018c\6\3\1\u018d\17\3\2\0"+
    "\4\3\2\0\33\3\1\u018e\10\3\2\0\4\3\2\0"+
    "\23\3\1\u018f\20\3\2\0\4\3\2\0\14\3\1\u0190"+
    "\27\3\2\0\4\3\2\0\12\3\1\u0191\31\3\2\0"+
    "\4\3\2\0\10\3\1\u0192\33\3\2\0\4\3\2\0"+
    "\25\3\1\u0193\16\3\2\0\4\3\2\0\12\3\1\u0194"+
    "\31\3\2\0\4\3\2\0\2\3\1\u0195\14\3\1\u0196"+
    "\24\3\2\0\4\3\2\0\17\3\1\u0197\24\3\2\0"+
    "\4\3\2\0\17\3\1\u0198\24\3\2\0\4\3\2\0"+
    "\7\3\1\u0199\34\3\2\0\4\3\2\0\15\3\1\u019a"+
    "\26\3\2\0\4\3\2\0\17\3\1\u019b\24\3\2\0"+
    "\4\3\2\0\2\3\1\u019c\41\3\2\0\4\3\2\0"+
    "\23\3\1\u019d\20\3\2\0\4\3\2\0\12\3\1\u019e"+
    "\31\3\2\0\4\3\2\0\7\3\1\u019f\34\3\2\0"+
    "\4\3\2\0\4\3\1\u01a0\37\3\2\0\4\3\2\0"+
    "\43\3\1\u01a1\2\0\4\3\2\0\23\3\1\u01a2\20\3"+
    "\2\0\4\3\2\0\14\3\1\u01a3\27\3\2\0\4\3"+
    "\2\0\7\3\1\u01a4\34\3\2\0\4\3\2\0\12\3"+
    "\1\u01a5\31\3\2\0\4\3\2\0\21\3\1\u01a6\22\3"+
    "\2\0\4\3\2\0\10\3\1\u01a7\33\3\2\0\4\3"+
    "\2\0\21\3\1\u01a8\22\3\2\0\4\3\2\0\24\3"+
    "\1\u01a9\17\3\2\0\4\3\2\0\4\3\1\u01aa\37\3"+
    "\2\0\4\3\2\0\11\3\1\u01ab\32\3\2\0\4\3"+
    "\2\0\4\3\1\u01ac\37\3\2\0\4\3\2\0\12\3"+
    "\1\u01ad\31\3\2\0\4\3\2\0\24\3\1\u01ae\17\3"+
    "\2\0\4\3\2\0\6\3\1\u01af\35\3\2\0\4\3"+
    "\2\0\10\3\1\u01b0\33\3\2\0\4\3\2\0\10\3"+
    "\1\u01b1\33\3\2\0\4\3\2\0\17\3\1\u01b2\24\3"+
    "\2\0\4\3\2\0\4\3\1\u01b3\5\3\1\u01b4\31\3"+
    "\2\0\4\3\2\0\10\3\1\u01b5\33\3\2\0\4\3"+
    "\2\0\2\3\1\u01b6\41\3\2\0\4\3\2\0\21\3"+
    "\1\u01b7\22\3\2\0\4\3\2\0\11\3\1\u01b8\32\3"+
    "\2\0\4\3\2\0\4\3\1\u01b9\37\3\2\0\4\3"+
    "\2\0\7\3\1\u01ba\34\3\2\0\4\3\2\0\11\3"+
    "\1\u01bb\32\3\2\0\4\3\2\0\4\3\1\u01bc\37\3"+
    "\2\0\4\3\2\0\2\3\1\u01bd\41\3\2\0\4\3"+
    "\2\0\2\3\1\u01be\41\3\2\0\4\3\2\0\11\3"+
    "\1\u01bf\32\3\2\0\4\3\2\0\2\3\1\u01c0\41\3"+
    "\2\0\4\3\2\0\10\3\1\u01c1\33\3\2\0\4\3"+
    "\2\0\21\3\1\u01c2\22\3\2\0\4\3\2\0\12\3"+
    "\1\u01c3\31\3\2\0\4\3\2\0\23\3\1\u01c4\20\3"+
    "\2\0\4\3\2\0\12\3\1\u01c5\10\3\1\u01c6\20\3"+
    "\2\0\4\3\2\0\15\3\1\u01c7\1\3\1\u01c8\24\3"+
    "\2\0\4\3\2\0\26\3\1\u01c9\15\3\2\0\4\3"+
    "\2\0\17\3\1\u01ca\24\3\2\0\4\3\2\0\15\3"+
    "\1\u01cb\26\3\2\0\4\3\2\0\11\3\1\u01cc\32\3"+
    "\2\0\4\3\2\0\5\3\1\u01cd\36\3\2\0\4\3"+
    "\2\0\14\3\1\u01ce\27\3\2\0\4\3\2\0\4\3"+
    "\1\u01cf\4\3\1\u01d0\11\3\1\u01d1\20\3\2\0\4\3"+
    "\2\0\24\3\1\u01d2\17\3\2\0\4\3\2\0\16\3"+
    "\1\u01d3\25\3\2\0\4\3\2\0\17\3\1\u01d4\24\3"+
    "\2\0\4\3\2\0\10\3\1\u01d5\2\3\1\u01d6\11\3"+
    "\1\u01d7\16\3\2\0\4\3\2\0\2\3\1\u01d8\41\3"+
    "\2\0\4\3\2\0\26\3\1\u01d9\15\3\2\0\4\3"+
    "\2\0\5\3\1\u01da\3\3\1\u01db\2\3\1\u01dc\27\3"+
    "\2\0\4\3\2\0\11\3\1\u01dd\32\3\2\0\4\3"+
    "\2\0\17\3\1\u01de\24\3\2\0\4\3\2\0\23\3"+
    "\1\u01df\20\3\2\0\4\3\2\0\11\3\1\u01e0\32\3"+
    "\2\0\4\3\2\0\12\3\1\u01e1\31\3\2\0\4\3"+
    "\2\0\4\3\1\u01e2\37\3\2\0\4\3\2\0\4\3"+
    "\1\u01e3\1\u01e4\3\3\1\u01e5\32\3\2\0\4\3\2\0"+
    "\10\3\1\u01e6\33\3\2\0\4\3\2\0\11\3\1\u01e7"+
    "\32\3\2\0\4\3\2\0\10\3\1\u01e8\33\3\2\0"+
    "\4\3\2\0\10\3\1\u01e9\33\3\2\0\4\3\2\0"+
    "\23\3\1\u01ea\20\3\2\0\4\3\2\0\2\3\1\u01eb"+
    "\41\3\2\0\4\3\2\0\7\3\1\u01ec\34\3\2\0"+
    "\4\3\2\0\10\3\1\u01ed\2\3\1\u01ee\30\3\2\0"+
    "\4\3\2\0\6\3\1\u01ef\35\3\2\0\4\3\2\0"+
    "\10\3\1\u01f0\33\3\2\0\4\3\2\0\21\3\1\u01f1"+
    "\22\3\2\0\4\3\2\0\6\3\1\u01f2\35\3\2\0"+
    "\4\3\2\0\17\3\1\u01f3\24\3\2\0\4\3\2\0"+
    "\15\3\1\u01f4\26\3\2\0\4\3\2\0\12\3\1\u01f5"+
    "\31\3\2\0\4\3\2\0\4\3\1\u01f6\3\3\1\u01f7"+
    "\33\3\2\0\4\3\2\0\11\3\1\u01f8\32\3\2\0"+
    "\4\3\2\0\12\3\1\u01f9\31\3\2\0\4\3\2\0"+
    "\11\3\1\u01fa\32\3\2\0\4\3\2\0\4\3\1\u01fb"+
    "\10\3\1\u01fc\1\3\1\u01fd\24\3\2\0\4\3\2\0"+
    "\2\3\1\u01fe\41\3\2\0\4\3\2\0\2\3\1\u01ff"+
    "\41\3\2\0\4\3\2\0\21\3\1\u0200\22\3\2\0"+
    "\4\3\2\0\22\3\1\u0201\21\3\2\0\4\3\2\0"+
    "\10\3\1\u0202\33\3\2\0\4\3\2\0\17\3\1\u0203"+
    "\24\3\2\0\4\3\2\0\4\3\1\u0204\37\3\2\0"+
    "\4\3\2\0\3\3\1\u0205\40\3\2\0\4\3\2\0"+
    "\7\3\1\u0206\34\3\2\0\4\3\2\0\5\3\1\u0207"+
    "\36\3\2\0\4\3\2\0\11\3\1\u0208\32\3\2\0"+
    "\4\3\2\0\10\3\1\u0209\33\3\2\0\4\3\2\0"+
    "\11\3\1\u020a\32\3\2\0\4\3\2\0\6\3\1\u020b"+
    "\35\3\2\0\4\3\2\0\23\3\1\u020c\20\3\2\0"+
    "\4\3\2\0\10\3\1\u020d\33\3\2\0\4\3\2\0"+
    "\21\3\1\u020e\22\3\2\0\4\3\2\0\23\3\1\u020f"+
    "\20\3\2\0\4\3\2\0\2\3\1\u0210\41\3\2\0"+
    "\4\3\2\0\2\3\1\u0211\41\3\2\0\4\3\2\0"+
    "\22\3\1\u0212\21\3\2\0\4\3\2\0\10\3\1\u0213"+
    "\33\3\2\0\4\3\2\0\11\3\1\u0214\32\3\2\0"+
    "\4\3\2\0\24\3\1\u0215\17\3\2\0\4\3\2\0"+
    "\5\3\1\u0216\36\3\2\0\4\3\2\0\10\3\1\u0217"+
    "\33\3\2\0\4\3\2\0\12\3\1\u0218\31\3\2\0"+
    "\4\3\2\0\10\3\1\u0219\33\3\2\0\4\3\2\0"+
    "\21\3\1\u021a\22\3\2\0\4\3\2\0\10\3\1\u021b"+
    "\33\3\2\0\4\3\2\0\4\3\1\u021c\37\3\2\0"+
    "\4\3\2\0\10\3\1\u021d\33\3\2\0\4\3\2\0"+
    "\2\3\1\u021e\41\3\2\0\4\3\2\0\22\3\1\u021f"+
    "\21\3\2\0\4\3\2\0\11\3\1\u0220\32\3\2\0"+
    "\4\3\2\0\15\3\1\u0221\26\3\2\0\4\3\2\0"+
    "\11\3\1\u0222\32\3\2\0\4\3\2\0\25\3\1\u0223"+
    "\16\3\2\0\4\3\2\0\16\3\1\u0224\25\3\2\0"+
    "\4\3\2\0\10\3\1\u0225\33\3\2\0\4\3\2\0"+
    "\7\3\1\u0226\34\3\2\0\4\3\2\0\25\3\1\u0227"+
    "\16\3\2\0\4\3\2\0\12\3\1\u0228\31\3\2\0"+
    "\4\3\2\0\12\3\1\u0229\31\3\2\0\4\3\2\0"+
    "\14\3\1\u022a\27\3\2\0\4\3\2\0\14\3\1\u022b"+
    "\2\3\1\u022c\24\3\2\0\4\3\2\0\2\3\1\u022d"+
    "\41\3\2\0\4\3\2\0\3\3\1\u022e\40\3\2\0"+
    "\4\3\2\0\22\3\1\u022f\21\3\2\0\4\3\2\0"+
    "\11\3\1\u0230\32\3\2\0\4\3\2\0\24\3\1\u0231"+
    "\17\3\2\0\4\3\2\0\2\3\1\u0232\41\3\2\0"+
    "\4\3\2\0\24\3\1\u0233\17\3\2\0\4\3\2\0"+
    "\6\3\1\u0234\35\3\2\0\4\3\2\0\15\3\1\u0235"+
    "\26\3\2\0\4\3\2\0\26\3\1\u0236\15\3\2\0"+
    "\4\3\2\0\10\3\1\u0237\33\3\2\0\4\3\2\0"+
    "\12\3\1\u0238\31\3\2\0\4\3\2\0\4\3\1\u0239"+
    "\3\3\1\u023a\33\3\2\0\4\3\2\0\5\3\1\u023b"+
    "\36\3\2\0\4\3\2\0\6\3\1\u023c\35\3\2\0"+
    "\4\3\2\0\21\3\1\u023d\22\3\2\0\4\3\2\0"+
    "\5\3\1\u023e\36\3\2\0\4\3\2\0\11\3\1\u023f"+
    "\32\3\2\0\4\3\2\0\11\3\1\u0240\32\3\2\0"+
    "\4\3\2\0\25\3\1\u0241\16\3\2\0\4\3\2\0"+
    "\2\3\1\u0242\41\3\2\0\4\3\2\0\20\3\1\u0243"+
    "\23\3\2\0\4\3\2\0\23\3\1\u0244\20\3\2\0"+
    "\4\3\2\0\5\3\1\u0245\36\3\2\0\4\3\2\0"+
    "\10\3\1\u0246\33\3\2\0\4\3\2\0\21\3\1\u0247"+
    "\22\3\2\0\4\3\2\0\21\3\1\u0248\22\3\2\0"+
    "\4\3\2\0\12\3\1\u0249\31\3\2\0\4\3\2\0"+
    "\2\3\1\u024a\41\3\2\0\4\3\2\0\23\3\1\u024b"+
    "\20\3\2\0\4\3\2\0\23\3\1\u024c\20\3\2\0"+
    "\4\3\2\0\21\3\1\u024d\22\3\2\0\4\3\2\0"+
    "\25\3\1\u024e\16\3\2\0\4\3\2\0\11\3\1\u024f"+
    "\32\3\2\0\4\3\2\0\6\3\1\u0250\11\3\1\u0251"+
    "\23\3\2\0\4\3\2\0\6\3\1\u0252\35\3\2\0"+
    "\4\3\2\0\2\3\1\u0253\41\3\2\0\4\3\2\0"+
    "\13\3\1\u0254\30\3\2\0\4\3\2\0\21\3\1\u0255"+
    "\22\3\2\0\4\3\2\0\6\3\1\u0256\35\3\2\0"+
    "\4\3\2\0\3\3\1\u0257\40\3\2\0\4\3\2\0"+
    "\4\3\1\u0258\37\3\2\0\4\3\2\0\13\3\1\u0259"+
    "\30\3\2\0\4\3\2\0\10\3\1\u025a\33\3\2\0"+
    "\4\3\2\0\16\3\1\u025b\2\3\1\u025c\22\3\2\0"+
    "\4\3\2\0\21\3\1\u025d\22\3\2\0\4\3\2\0"+
    "\17\3\1\u025e\24\3\2\0\4\3\2\0\23\3\1\u025f"+
    "\20\3\2\0\4\3\2\0\23\3\1\u0260\20\3\2\0"+
    "\4\3\2\0\30\3\1\u0261\13\3\2\0\4\3\2\0"+
    "\6\3\1\u0262\35\3\2\0\4\3\2\0\12\3\1\u0263"+
    "\31\3\2\0\4\3\2\0\11\3\1\u0264\32\3\2\0"+
    "\4\3\2\0\12\3\1\u0265\31\3\2\0\4\3\2\0"+
    "\16\3\1\u0266\25\3\2\0\4\3\2\0\11\3\1\u0267"+
    "\32\3\2\0\4\3\2\0\12\3\1\u0268\31\3\2\0"+
    "\4\3\2\0\10\3\1\u0269\33\3\2\0\4\3\2\0"+
    "\10\3\1\u026a\33\3\2\0\4\3\2\0\13\3\1\u026b"+
    "\30\3\2\0\4\3\2\0\11\3\1\u026c\32\3\2\0"+
    "\4\3\2\0\25\3\1\u026d\16\3\2\0\4\3\2\0"+
    "\6\3\1\u026e\35\3\2\0\4\3\2\0\10\3\1\u026f"+
    "\33\3\2\0\4\3\2\0\21\3\1\u0270\22\3\2\0"+
    "\4\3\2\0\10\3\1\u0271\33\3\2\0\4\3\2\0"+
    "\5\3\1\u0272\36\3\2\0\4\3\2\0\5\3\1\u0273"+
    "\36\3\2\0\4\3\2\0\20\3\1\u0274\23\3\2\0"+
    "\4\3\2\0\3\3\1\u0275\40\3\2\0\4\3\2\0"+
    "\23\3\1\u0276\20\3\2\0\4\3\2\0\12\3\1\u0277"+
    "\31\3\2\0\4\3\2\0\12\3\1\u0278\31\3\2\0"+
    "\4\3\2\0\11\3\1\u0279\32\3\2\0\4\3\2\0"+
    "\2\3\1\u027a\41\3\2\0\4\3\2\0\17\3\1\u027b"+
    "\24\3\2\0\4\3\2\0\24\3\1\u027c\17\3\2\0"+
    "\4\3\2\0\21\3\1\u027d\22\3\2\0\4\3\2\0"+
    "\17\3\1\u027e\24\3\2\0\4\3\2\0\23\3\1\u027f"+
    "\20\3\2\0\4\3\2\0\3\3\1\u0280\40\3\2\0"+
    "\4\3\2\0\2\3\1\u0281\41\3\2\0\4\3\2\0"+
    "\5\3\1\u0282\36\3\2\0\4\3\2\0\2\3\1\u0283"+
    "\41\3\2\0\4\3\2\0\15\3\1\u0284\26\3\2\0"+
    "\4\3\2\0\3\3\1\u0285\40\3\2\0\4\3\2\0"+
    "\21\3\1\u0286\22\3\2\0\4\3\2\0\15\3\1\u0287"+
    "\26\3\2\0\4\3\2\0\11\3\1\u0288\32\3\2\0"+
    "\4\3\2\0\12\3\1\u0289\31\3\2\0\4\3\2\0"+
    "\11\3\1\u028a\32\3\2\0\4\3\2\0\21\3\1\u028b"+
    "\22\3\2\0\4\3\2\0\17\3\1\u028c\24\3\2\0"+
    "\4\3\2\0\26\3\1\u028d\15\3\2\0\4\3\2\0"+
    "\24\3\1\u028e\17\3\2\0\4\3\2\0\11\3\1\u028f"+
    "\32\3\2\0\4\3\2\0\15\3\1\u0290\26\3\2\0"+
    "\4\3\2\0\2\3\1\u0291\41\3\2\0\4\3\2\0"+
    "\17\3\1\u0292\24\3\2\0\4\3\2\0\12\3\1\u0293"+
    "\31\3\2\0\4\3\2\0\2\3\1\u0294\41\3\2\0"+
    "\4\3\2\0\22\3\1\u0295\21\3\2\0\4\3\2\0"+
    "\21\3\1\u0296\22\3\2\0\4\3\2\0\2\3\1\u0297"+
    "\41\3\2\0\4\3\2\0\14\3\1\u0298\27\3\2\0"+
    "\4\3\2\0\4\3\1\u0299\37\3\2\0\4\3\2\0"+
    "\13\3\1\u029a\30\3\2\0\4\3\2\0\16\3\1\u029b"+
    "\25\3\2\0\4\3\2\0\13\3\1\u029c\30\3\2\0"+
    "\4\3\2\0\2\3\1\u029d\41\3\2\0\4\3\2\0"+
    "\2\3\1\u029e\41\3\2\0\4\3\2\0\11\3\1\u029f"+
    "\32\3\2\0\4\3\2\0\17\3\1\u02a0\24\3\2\0"+
    "\4\3\2\0\11\3\1\u02a1\32\3\2\0\4\3\2\0"+
    "\12\3\1\u02a2\31\3\2\0\4\3\2\0\20\3\1\u02a3"+
    "\23\3\2\0\4\3\2\0\17\3\1\u02a4\24\3\2\0"+
    "\4\3\2\0\15\3\1\u02a5\26\3\2\0\4\3\2\0"+
    "\23\3\1\u02a6\20\3\2\0\4\3\2\0\11\3\1\u02a7"+
    "\32\3\2\0\4\3\2\0\2\3\1\u02a8\41\3\2\0"+
    "\4\3\2\0\15\3\1\u02a9\26\3\2\0\4\3\2\0"+
    "\14\3\1\u02aa\27\3\2\0\4\3\2\0\25\3\1\u02ab"+
    "\16\3\2\0\4\3\2\0\21\3\1\u02ac\22\3\2\0"+
    "\4\3\2\0\2\3\1\u02ad\41\3\2\0\4\3\2\0"+
    "\24\3\1\u02ae\17\3\2\0\4\3\2\0\21\3\1\u02af"+
    "\22\3\2\0\4\3\2\0\26\3\1\u02b0\15\3\2\0"+
    "\4\3\2\0\17\3\1\u02b1\24\3\2\0\4\3\2\0"+
    "\12\3\1\u02b2\31\3\2\0\4\3\2\0\6\3\1\u02b3"+
    "\35\3\2\0\4\3\2\0\3\3\1\u02b4\40\3\2\0"+
    "\4\3\2\0\4\3\1\u02b5\37\3\2\0\4\3\2\0"+
    "\6\3\1\u02b6\35\3\2\0\4\3\2\0\2\3\1\u02b7"+
    "\41\3\2\0\4\3\2\0\22\3\1\u02b8\21\3\2\0"+
    "\4\3\2\0\15\3\1\u02b9\26\3\2\0\4\3\2\0"+
    "\20\3\1\u02ba\23\3\2\0\4\3\2\0\23\3\1\u02bb"+
    "\20\3\2\0\4\3\2\0\20\3\1\u02bc\23\3\2\0"+
    "\4\3\2\0\30\3\1\u02bd\13\3\2\0\4\3\2\0"+
    "\2\3\1\u02be\7\3\1\u02bf\31\3\2\0\4\3\2\0"+
    "\11\3\1\u02c0\32\3\2\0\4\3\2\0\21\3\1\u02c1"+
    "\22\3\2\0\4\3\2\0\7\3\1\u02c2\34\3\2\0"+
    "\4\3\2\0\13\3\1\u02c3\30\3\2\0\4\3\2\0"+
    "\6\3\1\u02c4\35\3\2\0\4\3\2\0\21\3\1\u02c5"+
    "\22\3\2\0\4\3\2\0\5\3\1\u02c6\36\3\2\0"+
    "\4\3\2\0\11\3\1\u02c7\32\3\2\0\4\3\2\0"+
    "\12\3\1\u02c8\31\3\2\0\4\3\2\0\14\3\1\u02c9"+
    "\27\3\2\0\4\3\2\0\23\3\1\u02ca\20\3\2\0"+
    "\4\3\2\0\2\3\1\u02cb\41\3\2\0\4\3\2\0"+
    "\16\3\1\u02cc\25\3\2\0\4\3\2\0\22\3\1\u02cc"+
    "\21\3\2\0\4\3\2\0\2\3\1\u02cd\41\3\2\0"+
    "\4\3\2\0\20\3\1\u02ce\23\3\2\0\4\3\2\0"+
    "\11\3\1\u02cf\32\3\2\0\4\3\2\0\11\3\1\u02d0"+
    "\32\3\2\0\4\3\2\0\4\3\1\u02d1\15\3\1\u02d2"+
    "\21\3\2\0\4\3\2\0\17\3\1\u02d3\24\3\2\0"+
    "\4\3\2\0\16\3\1\u02d4\1\u02d5\4\3\1\u02d6\17\3"+
    "\2\0\4\3\2\0\12\3\1\u02d7\31\3\2\0\4\3"+
    "\2\0\17\3\1\u02d8\24\3\2\0\4\3\2\0\4\3"+
    "\1\u02d9\3\3\1\u02da\33\3\2\0\4\3\2\0\20\3"+
    "\1\u02db\23\3\2\0\4\3\2\0\12\3\1\u02dc\31\3"+
    "\2\0\4\3\2\0\11\3\1\u02dd\32\3\2\0\4\3"+
    "\2\0\31\3\1\u02de\12\3\2\0\4\3\2\0\13\3"+
    "\1\u02df\30\3\2\0\4\3\2\0\2\3\1\u02e0\41\3"+
    "\2\0\4\3\2\0\15\3\1\u02e1\26\3\2\0\4\3"+
    "\2\0\2\3\1\u02e2\41\3\2\0\4\3\2\0\6\3"+
    "\1\u02e3\35\3\2\0\4\3\2\0\33\3\1\u02e3\10\3"+
    "\2\0\4\3\2\0\11\3\1\u02e4\32\3\2\0\4\3"+
    "\2\0\11\3\1\u02e5\32\3\2\0\4\3\2\0\10\3"+
    "\1\u02e6\33\3\2\0\4\3\2\0\4\3\1\u02e7\37\3"+
    "\2\0\4\3\2\0\5\3\1\u02e8\36\3\2\0\4\3"+
    "\2\0\21\3\1\u02e9\22\3\2\0\4\3\2\0\6\3"+
    "\1\u02ea\35\3\2\0\4\3\2\0\2\3\1\u02eb\41\3"+
    "\2\0\4\3\2\0\20\3\1\u02ec\23\3\2\0\4\3"+
    "\2\0\22\3\1\u02ed\21\3\2\0\4\3\2\0\2\3"+
    "\1\u02ee\41\3\2\0\4\3\2\0\12\3\1\u02ef\31\3"+
    "\2\0\4\3\2\0\3\3\1\u02f0\40\3\2\0\4\3"+
    "\2\0\21\3\1\u02f1\22\3\2\0\4\3\2\0\7\3"+
    "\1\u02f2\34\3\2\0\4\3\2\0\11\3\1\u02f3\32\3"+
    "\2\0\4\3\2\0\7\3\1\u02f4\34\3\2\0\4\3"+
    "\2\0\24\3\1\u02f5\17\3\2\0\4\3\2\0\10\3"+
    "\1\u02f6\33\3\2\0\4\3\2\0\11\3\1\u02f7\32\3"+
    "\2\0\4\3\2\0\4\3\1\u02f8\37\3\2\0\4\3"+
    "\2\0\2\3\1\u02f9\41\3\2\0\4\3\2\0\2\3"+
    "\1\u02fa\2\3\1\u02fb\36\3\2\0\4\3\2\0\4\3"+
    "\1\u02fc\37\3\2\0\4\3\2\0\12\3\1\u02fd\31\3"+
    "\2\0\4\3\2\0\2\3\1\u02fe\41\3\2\0\4\3"+
    "\2\0\10\3\1\u02ff\33\3\2\0\4\3\2\0\10\3"+
    "\1\u0300\33\3\2\0\4\3\2\0\4\3\1\u0301\37\3"+
    "\2\0\4\3\2\0\6\3\1\u0302\35\3\2\0\4\3"+
    "\2\0\15\3\1\u0303\26\3\2\0\4\3\2\0\12\3"+
    "\1\u0304\31\3\2\0\4\3\2\0\12\3\1\u0305\31\3"+
    "\2\0\4\3\2\0\11\3\1\u0306\32\3\2\0\4\3"+
    "\2\0\17\3\1\u0307\24\3\2\0\4\3\2\0\5\3"+
    "\1\u0308\36\3\2\0\4\3\2\0\13\3\1\u0309\30\3"+
    "\2\0\4\3\2\0\6\3\1\u030a\35\3\2\0\4\3"+
    "\2\0\13\3\1\u030b\30\3\2\0\4\3\2\0\10\3"+
    "\1\u030c\33\3\2\0\4\3\2\0\6\3\1\u030d\35\3"+
    "\2\0\4\3\2\0\7\3\1\u030e\7\3\1\u030f\24\3"+
    "\2\0\4\3\2\0\11\3\1\u0310\32\3\2\0\4\3"+
    "\2\0\21\3\1\u0311\22\3\2\0\4\3\2\0\23\3"+
    "\1\u0312\20\3\2\0\4\3\2\0\6\3\1\u0313\35\3"+
    "\2\0\4\3\2\0\17\3\1\u0314\24\3\2\0\4\3"+
    "\2\0\5\3\1\u0315\3\3\1\u0316\32\3\2\0\4\3"+
    "\2\0\11\3\1\u0317\32\3\2\0\4\3\2\0\13\3"+
    "\1\u0318\30\3\2\0\4\3\2\0\3\3\1\u0319\40\3"+
    "\2\0\4\3\2\0\12\3\1\u031a\31\3\2\0\4\3"+
    "\2\0\22\3\1\u031b\21\3\2\0\4\3\2\0\11\3"+
    "\1\u031c\32\3\2\0\4\3\2\0\17\3\1\u031d\24\3"+
    "\2\0\4\3\2\0\24\3\1\u031e\17\3\2\0\4\3"+
    "\2\0\11\3\1\u031f\32\3\2\0\4\3\2\0\17\3"+
    "\1\u0320\24\3\2\0\4\3\2\0\11\3\1\u0321\32\3"+
    "\2\0\4\3\2\0\22\3\1\u0322\21\3\2\0\4\3"+
    "\2\0\17\3\1\u0323\24\3\2\0\4\3\2\0\17\3"+
    "\1\u0324\24\3\2\0\4\3\2\0\23\3\1\u0325\20\3"+
    "\2\0\4\3\2\0\21\3\1\u0326\22\3\2\0\4\3"+
    "\2\0\7\3\1\u0327\34\3\2\0\4\3\2\0\11\3"+
    "\1\u0328\32\3\2\0\4\3\2\0\13\3\1\u0329\30\3"+
    "\2\0\4\3\2\0\2\3\1\u032a\3\3\1\u032b\4\3"+
    "\1\u032c\2\3\1\u032d\3\3\1\u032e\21\3\2\0\4\3"+
    "\2\0\17\3\1\u032f\24\3\2\0\4\3\2\0\10\3"+
    "\1\u0330\33\3\2\0\4\3\2\0\20\3\1\u0331\23\3"+
    "\2\0\4\3\2\0\2\3\1\u0332\41\3\2\0\4\3"+
    "\2\0\21\3\1\u0333\22\3\2\0\4\3\2\0\17\3"+
    "\1\u0334\24\3\2\0\4\3\2\0\13\3\1\u0335\17\3"+
    "\1\u0336\10\3\2\0\4\3\2\0\23\3\1\u0337\20\3"+
    "\2\0\4\3\2\0\30\3\1\u0338\13\3\2\0\4\3"+
    "\2\0\17\3\1\u0339\24\3\2\0\4\3\2\0\6\3"+
    "\1\u033a\35\3\2\0\4\3\2\0\11\3\1\u033b\32\3"+
    "\2\0\4\3\2\0\12\3\1\u033c\31\3\2\0\4\3"+
    "\2\0\12\3\1\u033d\31\3\2\0\4\3\2\0\15\3"+
    "\1\u033e\26\3\2\0\4\3\2\0\11\3\1\u033f\32\3"+
    "\2\0\4\3\2\0\21\3\1\u0340\22\3\2\0\4\3"+
    "\2\0\2\3\1\u0341\41\3\2\0\4\3\2\0\2\3"+
    "\1\u0342\41\3\2\0\4\3\2\0\2\3\1\u0343\41\3"+
    "\2\0\4\3\2\0\20\3\1\u0344\23\3\2\0\4\3"+
    "\2\0\21\3\1\u0345\22\3\2\0\4\3\2\0\14\3"+
    "\1\u0346\27\3\2\0\4\3\2\0\25\3\1\u0347\16\3"+
    "\2\0\4\3\2\0\11\3\1\u0348\32\3\2\0\4\3"+
    "\2\0\17\3\1\u0349\24\3\2\0\4\3\2\0\17\3"+
    "\1\u034a\24\3\2\0\4\3\2\0\7\3\1\u034b\34\3"+
    "\2\0\4\3\2\0\11\3\1\u034c\32\3\2\0\4\3"+
    "\2\0\7\3\1\u034d\34\3\2\0\4\3\2\0\25\3"+
    "\1\u034e\16\3\2\0\4\3\2\0\17\3\1\u034f\24\3"+
    "\2\0\4\3\2\0\4\3\1\u0350\37\3\2\0\4\3"+
    "\2\0\6\3\1\u0351\35\3\2\0\4\3\2\0\25\3"+
    "\1\u0352\16\3\2\0\4\3\2\0\21\3\1\u0353\22\3"+
    "\2\0\4\3\2\0\10\3\1\u0354\33\3\2\0\4\3"+
    "\2\0\12\3\1\u0355\31\3\2\0\4\3\2\0\21\3"+
    "\1\u0356\22\3\2\0\4\3\2\0\11\3\1\u0357\32\3"+
    "\2\0\4\3\2\0\7\3\1\u0358\34\3\2\0\4\3"+
    "\2\0\6\3\1\u0359\35\3\2\0\4\3\2\0\13\3"+
    "\1\u035a\17\3\1\u035b\10\3\2\0\4\3\2\0\11\3"+
    "\1\u035c\32\3\2\0\4\3\2\0\10\3\1\u035d\33\3"+
    "\2\0\4\3\2\0\11\3\1\u035e\32\3\2\0\4\3"+
    "\2\0\23\3\1\u035f\20\3\2\0\4\3\2\0\20\3"+
    "\1\u0360\23\3\2\0\4\3\2\0\21\3\1\u0361\22\3"+
    "\2\0\4\3\2\0\6\3\1\u0362\35\3\2\0\4\3"+
    "\2\0\6\3\1\u0363\35\3\2\0\4\3\2\0\12\3"+
    "\1\u0364\31\3\2\0\4\3\2\0\7\3\1\u0365\34\3"+
    "\2\0\4\3\2\0\6\3\1\u0366\35\3\2\0\4\3"+
    "\2\0\23\3\1\u0367\20\3\2\0\4\3\2\0\25\3"+
    "\1\u0368\16\3\2\0\4\3\2\0\11\3\1\u0369\32\3"+
    "\2\0\4\3\2\0\10\3\1\u036a\33\3\2\0\4\3"+
    "\2\0\17\3\1\u036b\4\3\1\u036c\17\3\2\0\4\3"+
    "\2\0\23\3\1\u036d\20\3\2\0\4\3\2\0\5\3"+
    "\1\u036e\36\3\2\0\4\3\2\0\17\3\1\u036f\24\3"+
    "\2\0\4\3\2\0\11\3\1\u0370\32\3\2\0\4\3"+
    "\2\0\16\3\1\u0371\25\3\2\0\4\3\2\0\5\3"+
    "\1\u0372\36\3\2\0\4\3\2\0\16\3\1\u0373\25\3"+
    "\2\0\4\3\2\0\4\3\1\u0374\37\3\2\0\4\3"+
    "\2\0\21\3\1\u0375\22\3\2\0\4\3\2\0\23\3"+
    "\1\u0376\20\3\2\0\4\3\2\0\7\3\1\u0377\34\3"+
    "\2\0\4\3\2\0\12\3\1\u0378\31\3\2\0\4\3"+
    "\2\0\4\3\1\u0379\37\3\2\0\4\3\2\0\21\3"+
    "\1\u037a\22\3\2\0\4\3\2\0\6\3\1\u037b\35\3"+
    "\2\0\4\3\2\0\6\3\1\u037c\35\3\2\0\4\3"+
    "\2\0\11\3\1\u037d\32\3\2\0\4\3\2\0\11\3"+
    "\1\u037e\32\3\2\0\4\3\2\0\4\3\1\u037f\37\3"+
    "\2\0\4\3\2\0\7\3\1\u0380\34\3\2\0\4\3"+
    "\2\0\17\3\1\u0381\24\3\2\0\4\3\2\0\23\3"+
    "\1\u0382\20\3\2\0\4\3\2\0\12\3\1\u0383\31\3"+
    "\2\0\4\3\2\0\2\3\1\u0384\41\3\2\0\4\3"+
    "\2\0\10\3\1\u0385\33\3\2\0\4\3\2\0\11\3"+
    "\1\u0386\32\3\2\0\4\3\2\0\21\3\1\u0387\22\3"+
    "\2\0\4\3\2\0\6\3\1\u0388\35\3\2\0\4\3"+
    "\2\0\4\3\1\u0389\37\3\2\0\4\3\2\0\4\3"+
    "\1\u038a\37\3\2\0\4\3\2\0\7\3\1\u038b\34\3"+
    "\2\0\4\3\2\0\11\3\1\u038c\32\3\2\0\4\3"+
    "\2\0\4\3\1\u038d\37\3\2\0\4\3\2\0\2\3"+
    "\1\u038e\41\3\2\0\4\3\2\0\2\3\1\u038f\41\3"+
    "\2\0\4\3\2\0\12\3\1\u0390\31\3\2\0\4\3"+
    "\2\0\21\3\1\u0391\22\3\2\0\4\3\2\0\17\3"+
    "\1\u0392\24\3\2\0\4\3\2\0\11\3\1\u0393\32\3"+
    "\2\0\4\3\2\0\10\3\1\u0394\33\3\2\0\4\3"+
    "\2\0\11\3\1\u0395\32\3\2\0\4\3\2\0\23\3"+
    "\1\u0396\20\3\2\0\4\3\2\0\16\3\1\u0397\25\3"+
    "\2\0\4\3\2\0\11\3\1\u0398\32\3\2\0\4\3"+
    "\2\0\10\3\1\u025c\33\3\2\0\4\3\2\0\4\3"+
    "\1\u0399\37\3\2\0\4\3\2\0\23\3\1\u039a\20\3"+
    "\2\0\4\3\2\0\16\3\1\u039b\25\3\2\0\4\3"+
    "\2\0\2\3\1\u039c\41\3\2\0\4\3\2\0\15\3"+
    "\1\u039d\26\3\2\0\4\3\2\0\2\3\1\u039e\41\3"+
    "\2\0\4\3\2\0\15\3\1\u039f\26\3\2\0\4\3"+
    "\2\0\21\3\1\u03a0\22\3\2\0\4\3\2\0\7\3"+
    "\1\u03a1\34\3\2\0\4\3\2\0\23\3\1\u03a2\20\3"+
    "\2\0\4\3\2\0\2\3\1\u03a3\41\3\2\0\4\3"+
    "\2\0\11\3\1\u03a4\32\3\2\0\4\3\2\0\13\3"+
    "\1\u03a5\30\3\2\0\4\3\2\0\21\3\1\u03a6\22\3"+
    "\2\0\4\3\2\0\11\3\1\u03a7\32\3\2\0\4\3"+
    "\2\0\12\3\1\u03a8\31\3\2\0\4\3\2\0\11\3"+
    "\1\u03a9\32\3\2\0\4\3\2\0\10\3\1\u03aa\33\3"+
    "\2\0\4\3\2\0\21\3\1\u03ab\22\3\2\0\4\3"+
    "\2\0\12\3\1\u03ac\31\3\2\0\4\3\2\0\13\3"+
    "\1\u03ad\30\3\2\0\4\3\2\0\11\3\1\u03ae\32\3"+
    "\2\0\4\3\2\0\21\3\1\u03af\22\3\2\0\4\3"+
    "\2\0\15\3\1\u03b0\26\3\2\0\4\3\2\0\11\3"+
    "\1\u03b1\32\3\2\0\4\3\2\0\23\3\1\u03b2\20\3"+
    "\2\0\4\3\2\0\6\3\1\u03b3\35\3\2\0\4\3"+
    "\2\0\11\3\1\u03b4\32\3\2\0\4\3\2\0\26\3"+
    "\1\u03b5\15\3\2\0\4\3\2\0\13\3\1\u03b6\30\3"+
    "\2\0\4\3\2\0\4\3\1\u03b7\37\3\2\0\4\3"+
    "\2\0\7\3\1\u03b8\34\3\2\0\4\3\2\0\10\3"+
    "\1\u03b9\33\3\2\0\4\3\2\0\5\3\1\u03ba\36\3"+
    "\2\0\4\3\2\0\4\3\1\u03bb\37\3\2\0\4\3"+
    "\2\0\11\3\1\u03bc\32\3\2\0\4\3\2\0\5\3"+
    "\1\u03bd\36\3\2\0\4\3\2\0\21\3\1\u03be\22\3"+
    "\2\0\4\3\2\0\12\3\1\u03bf\31\3\2\0\4\3"+
    "\2\0\5\3\1\u03c0\36\3\2\0\4\3\2\0\2\3"+
    "\1\u03c1\41\3\2\0\4\3\2\0\2\3\1\u03c2\41\3"+
    "\2\0\4\3\2\0\21\3\1\u03c3\22\3\2\0\4\3"+
    "\2\0\21\3\1\u03c4\22\3\2\0\4\3\2\0\10\3"+
    "\1\u03c5\33\3\2\0\4\3\2\0\33\3\1\u03c6\10\3"+
    "\2\0\4\3\2\0\17\3\1\u03c7\24\3\2\0\4\3"+
    "\2\0\11\3\1\u03c8\32\3\2\0\4\3\2\0\10\3"+
    "\1\u03c9\33\3\2\0\4\3\2\0\21\3\1\u03ca\22\3"+
    "\2\0\4\3\2\0\20\3\1\u03cb\23\3\2\0\4\3"+
    "\2\0\22\3\1\u03cc\21\3\2\0\4\3\2\0\2\3"+
    "\1\u03cd\41\3\2\0\4\3\2\0\21\3\1\u03ce\22\3"+
    "\2\0\4\3\2\0\6\3\1\u03cf\35\3\2\0\4\3"+
    "\2\0\6\3\1\u03d0\35\3\2\0\4\3\2\0\6\3"+
    "\1\u03d1\35\3\2\0\4\3\2\0\14\3\1\u03d2\27\3"+
    "\2\0\4\3\2\0\15\3\1\u03d3\26\3\2\0\4\3"+
    "\2\0\4\3\1\u03d4\37\3\2\0\4\3\2\0\22\3"+
    "\1\u03d5\21\3\2\0\4\3\2\0\16\3\1\u03d6\25\3"+
    "\2\0\4\3\2\0\21\3\1\u03d7\22\3\2\0\4\3"+
    "\2\0\20\3\1\u03d8\23\3\2\0\4\3\2\0\12\3"+
    "\1\u03d9\31\3\2\0\4\3\2\0\7\3\1\u03da\34\3"+
    "\2\0\4\3\2\0\14\3\1\u03db\27\3\2\0\4\3"+
    "\2\0\11\3\1\u03dc\32\3\2\0\4\3\2\0\24\3"+
    "\1\u03dd\17\3\2\0\4\3\2\0\2\3\1\u03de\41\3"+
    "\2\0\4\3\2\0\24\3\1\u03df\17\3\2\0\4\3"+
    "\2\0\15\3\1\u03e0\26\3\2\0\4\3\2\0\10\3"+
    "\1\u03e1\33\3\2\0\4\3\2\0\4\3\1\u03e2\37\3"+
    "\2\0\4\3\2\0\12\3\1\u03e3\31\3\2\0\4\3"+
    "\2\0\10\3\1\u03e4\33\3\2\0\4\3\2\0\6\3"+
    "\1\u03e5\35\3\2\0\4\3\2\0\2\3\1\u03e6\41\3"+
    "\2\0\4\3\2\0\21\3\1\u03e7\22\3\2\0\4\3"+
    "\2\0\10\3\1\u03e8\33\3\2\0\4\3\2\0\12\3"+
    "\1\u03e9\31\3\2\0\4\3\2\0\10\3\1\u03ea\33\3"+
    "\2\0\4\3\2\0\21\3\1\u03eb\22\3\2\0\4\3"+
    "\2\0\2\3\1\u03ec\41\3\2\0\4\3\2\0\6\3"+
    "\1\u03ed\35\3\2\0\4\3\2\0\2\3\1\u03ee\41\3"+
    "\2\0\4\3\2\0\6\3\1\u03ef\35\3\2\0\4\3"+
    "\2\0\10\3\1\u03f0\33\3\2\0\4\3\2\0\24\3"+
    "\1\u03f1\17\3\2\0\4\3\2\0\4\3\1\u03f2\37\3"+
    "\2\0\4\3\2\0\21\3\1\u03f3\22\3\2\0\4\3"+
    "\2\0\6\3\1\u03f4\35\3\2\0\4\3\2\0\6\3"+
    "\1\u03f5\35\3\2\0\4\3\2\0\11\3\1\u03f6\32\3"+
    "\2\0\4\3\2\0\10\3\1\u03f7\33\3\2\0\4\3"+
    "\2\0\13\3\1\u03f8\30\3\2\0\4\3\2\0\16\3"+
    "\1\u03f9\25\3\2\0\4\3\2\0\21\3\1\u03fa\22\3"+
    "\2\0\4\3\2\0\15\3\1\u03fb\26\3\2\0\4\3"+
    "\2\0\5\3\1\u03fc\36\3\2\0\4\3\2\0\10\3"+
    "\1\u03fd\33\3\2\0\4\3\2\0\10\3\1\u018d\33\3"+
    "\2\0\4\3\2\0\2\3\1\u03fe\41\3\2\0\4\3"+
    "\2\0\21\3\1\u03ff\22\3\2\0\4\3\2\0\11\3"+
    "\1\u0400\32\3\2\0\4\3\2\0\10\3\1\u0401\33\3"+
    "\2\0\4\3\2\0\11\3\1\u0402\32\3\2\0\4\3"+
    "\2\0\2\3\1\u0403\41\3\2\0\4\3\2\0\16\3"+
    "\1\u0404\25\3\2\0\4\3\2\0\11\3\1\u0405\32\3"+
    "\2\0\4\3\2\0\12\3\1\u0406\31\3\2\0\4\3"+
    "\2\0\21\3\1\u0407\22\3\2\0\4\3\2\0\16\3"+
    "\1\u0408\25\3\2\0\4\3\2\0\17\3\1\u0409\24\3"+
    "\2\0\4\3\2\0\21\3\1\u040a\22\3\2\0\4\3"+
    "\2\0\7\3\1\u040b\34\3\2\0\4\3\2\0\32\3"+
    "\1\u040c\11\3\2\0\4\3\2\0\10\3\1\u040d\33\3"+
    "\2\0\4\3\2\0\23\3\1\u040e\20\3\2\0\4\3"+
    "\2\0\10\3\1\u040f\33\3\2\0\4\3\2\0\2\3"+
    "\1\u0410\41\3\2\0\4\3\2\0\24\3\1\u0411\17\3"+
    "\2\0\4\3\2\0\11\3\1\u0412\32\3\2\0\4\3"+
    "\2\0\6\3\1\u0413\35\3\2\0\4\3\2\0\11\3"+
    "\1\u0414\32\3\2\0\4\3\2\0\4\3\1\u0415\37\3"+
    "\2\0\4\3\2\0\2\3\1\u0416\41\3\2\0\4\3"+
    "\2\0\10\3\1\u0417\33\3\2\0\4\3\2\0\2\3"+
    "\1\u0418\41\3\2\0\4\3\2\0\11\3\1\u0419\32\3"+
    "\2\0\4\3\2\0\2\3\1\u041a\41\3\2\0\4\3"+
    "\2\0\11\3\1\u041b\32\3\2\0\4\3\2\0\11\3"+
    "\1\u041c\32\3\2\0\4\3\2\0\14\3\1\u041d\3\3"+
    "\1\u041e\23\3\2\0\4\3\2\0\4\3\1\u041f\37\3"+
    "\2\0\4\3\2\0\2\3\1\u0420\41\3\2\0\4\3"+
    "\2\0\20\3\1\u0421\23\3\2\0\4\3\2\0\17\3"+
    "\1\u0422\24\3\2\0\4\3\2\0\23\3\1\u0423\20\3"+
    "\2\0\4\3\2\0\2\3\1\u0424\41\3\2\0\4\3"+
    "\2\0\14\3\1\u0425\27\3\2\0\4\3\2\0\4\3"+
    "\1\u0426\37\3\2\0\4\3\2\0\20\3\1\u0427\23\3"+
    "\2\0\4\3\2\0\30\3\1\u0428\13\3\2\0\4\3"+
    "\2\0\22\3\1\u0429\21\3\2\0\4\3\2\0\17\3"+
    "\1\u042a\24\3\2\0\4\3\2\0\11\3\1\u042b\32\3"+
    "\2\0\4\3\2\0\15\3\1\u042c\26\3\2\0\4\3"+
    "\2\0\15\3\1\u042d\26\3\2\0\4\3\2\0\11\3"+
    "\1\u042e\32\3\2\0\4\3\2\0\25\3\1\u042f\16\3"+
    "\2\0\4\3\2\0\5\3\1\u0430\36\3\2\0\4\3"+
    "\2\0\11\3\1\u0431\32\3\2\0\4\3\2\0\4\3"+
    "\1\u0432\37\3\2\0\4\3\2\0\6\3\1\u0433\35\3"+
    "\2\0\4\3\2\0\5\3\1\u0434\36\3\2\0\4\3"+
    "\2\0\17\3\1\u0435\24\3\2\0\4\3\2\0\15\3"+
    "\1\u0436\26\3\2\0\4\3\2\0\5\3\1\u0437\36\3"+
    "\2\0\4\3\2\0\10\3\1\u0438\33\3\2\0\4\3"+
    "\2\0\2\3\1\u0439\41\3\2\0\4\3\2\0\30\3"+
    "\1\u043a\13\3\2\0\4\3\2\0\22\3\1\u043b\21\3"+
    "\2\0\4\3\2\0\25\3\1\u043c\16\3\2\0\4\3"+
    "\2\0\12\3\1\u043d\31\3\2\0\4\3\2\0\24\3"+
    "\1\u043e\17\3\2\0\4\3\2\0\16\3\1\u043f\25\3"+
    "\2\0\4\3\2\0\16\3\1\u0440\25\3\2\0\4\3"+
    "\2\0\12\3\1\u0441\31\3\2\0\4\3\2\0\2\3"+
    "\1\u0442\41\3\2\0\4\3\2\0\12\3\1\u0443\31\3"+
    "\2\0\4\3\2\0\24\3\1\u0444\17\3\2\0\4\3"+
    "\2\0\4\3\1\u0445\37\3\2\0\4\3\2\0\11\3"+
    "\1\u0446\32\3\2\0\4\3\2\0\22\3\1\u0447\21\3"+
    "\2\0\4\3\2\0\10\3\1\u0448\33\3\2\0\4\3"+
    "\2\0\13\3\1\u0449\30\3\2\0\4\3\2\0\15\3"+
    "\1\u044a\26\3\2\0\4\3\2\0\13\3\1\u044b\30\3"+
    "\2\0\4\3\2\0\2\3\1\u044c\41\3\2\0\4\3"+
    "\2\0\6\3\1\u044d\35\3\2\0\4\3\2\0\15\3"+
    "\1\u044e\26\3\2\0\4\3\2\0\21\3\1\u044f\22\3"+
    "\2\0\4\3\2\0\12\3\1\u0450\31\3\2\0\4\3"+
    "\2\0\13\3\1\u0451\30\3\2\0\4\3\2\0\11\3"+
    "\1\u0452\32\3\2\0\4\3\2\0\21\3\1\u0453\22\3"+
    "\2\0\4\3\2\0\6\3\1\u0454\35\3\2\0\4\3"+
    "\2\0\11\3\1\u0455\32\3\2\0\4\3\2\0\14\3"+
    "\1\u0456\27\3\2\0\4\3\2\0\11\3\1\u0457\32\3"+
    "\2\0\4\3\2\0\12\3\1\u0458\31\3\2\0\4\3"+
    "\2\0\5\3\1\u0459\36\3\2\0\4\3\2\0\2\3"+
    "\1\u045a\41\3\2\0\4\3\2\0\13\3\1\u045b\30\3"+
    "\2\0\4\3\2\0\17\3\1\u045c\24\3\2\0\4\3"+
    "\2\0\10\3\1\u045d\33\3\2\0\4\3\2\0\12\3"+
    "\1\u045e\31\3\2\0\4\3\2\0\17\3\1\u0432\24\3"+
    "\2\0\4\3\2\0\17\3\1\u045f\24\3\2\0\4\3"+
    "\2\0\11\3\1\u0460\32\3\2\0\4\3\2\0\11\3"+
    "\1\u0461\32\3\2\0\4\3\2\0\21\3\1\u0462\22\3"+
    "\2\0\4\3\2\0\11\3\1\u0463\32\3\2\0\4\3"+
    "\2\0\10\3\1\u0464\33\3\2\0\4\3\2\0\12\3"+
    "\1\u0465\31\3\2\0\4\3\2\0\5\3\1\u0466\36\3"+
    "\2\0\4\3\2\0\14\3\1\u0467\3\3\1\u0468\23\3"+
    "\2\0\4\3\2\0\11\3\1\u0469\32\3\2\0\4\3"+
    "\2\0\2\3\1\u046a\41\3\2\0\4\3\2\0\10\3"+
    "\1\u046b\11\3\1\u046c\1\u046d\20\3\2\0\4\3\2\0"+
    "\15\3\1\u046e\26\3\2\0\4\3\2\0\14\3\1\u046f"+
    "\3\3\1\u0470\23\3\2\0\4\3\2\0\11\3\1\u0471"+
    "\32\3\2\0\4\3\2\0\4\3\1\u0472\37\3\2\0"+
    "\4\3\2\0\15\3\1\u0473\26\3\2\0\4\3\2\0"+
    "\10\3\1\u0474\33\3\2\0\4\3\2\0\23\3\1\u0475"+
    "\20\3\2\0\4\3\2\0\17\3\1\u0476\24\3\2\0"+
    "\4\3\2\0\10\3\1\u0477\33\3\2\0\4\3\2\0"+
    "\11\3\1\u0478\32\3\2\0\4\3\2\0\21\3\1\u0479"+
    "\22\3\2\0\4\3\2\0\10\3\1\u047a\33\3\2\0"+
    "\4\3\2\0\10\3\1\u047b\33\3\2\0\4\3\2\0"+
    "\23\3\1\u047c\20\3\2\0\4\3\2\0\11\3\1\u047d"+
    "\32\3\2\0\4\3\2\0\21\3\1\u047e\22\3\2\0"+
    "\4\3\2\0\23\3\1\u047f\20\3\2\0\4\3\2\0"+
    "\12\3\1\u0480\31\3\2\0\4\3\2\0\6\3\1\u0481"+
    "\35\3\2\0\4\3\2\0\11\3\1\u0482\32\3\2\0"+
    "\4\3\2\0\21\3\1\u0483\22\3\2\0\4\3\2\0"+
    "\10\3\1\u0484\11\3\1\u0485\21\3\2\0\4\3\2\0"+
    "\33\3\1\u0486\10\3\2\0\4\3\2\0\21\3\1\u0487"+
    "\22\3\2\0\4\3\2\0\11\3\1\u0488\32\3\2\0"+
    "\4\3\2\0\5\3\1\u0489\36\3\2\0\4\3\2\0"+
    "\16\3\1\u048a\25\3\2\0\4\3\2\0\10\3\1\u048b"+
    "\33\3\2\0\4\3\2\0\31\3\1\u048c\12\3\2\0"+
    "\4\3\2\0\21\3\1\u048d\22\3\2\0\4\3\2\0"+
    "\21\3\1\u048e\22\3\2\0\4\3\2\0\23\3\1\u048f"+
    "\20\3\2\0\4\3\2\0\10\3\1\u0490\11\3\1\u0491"+
    "\21\3\2\0\4\3\2\0\33\3\1\u0492\10\3\2\0"+
    "\4\3\2\0\12\3\1\u0493\31\3\2\0\4\3\2\0"+
    "\12\3\1\u0494\31\3\2\0\4\3\2\0\12\3\1\u0495"+
    "\31\3\2\0\4\3\2\0\15\3\1\u0496\26\3\2\0"+
    "\4\3\2\0\2\3\1\u0497\41\3\2\0\4\3\2\0"+
    "\11\3\1\u0498\32\3\2\0\4\3\2\0\21\3\1\u0499"+
    "\22\3\2\0\4\3\2\0\10\3\1\u049a\33\3\2\0"+
    "\4\3\2\0\12\3\1\u049b\31\3\2\0\4\3\2\0"+
    "\12\3\1\u049c\31\3\2\0\4\3\2\0\10\3\1\u049d"+
    "\33\3\2\0\4\3\2\0\14\3\1\u049e\27\3\2\0"+
    "\4\3\2\0\5\3\1\u049f\36\3\2\0\4\3\2\0"+
    "\11\3\1\u04a0\32\3\2\0\4\3\2\0\12\3\1\u04a1"+
    "\31\3\2\0\4\3\2\0\15\3\1\u04a2\26\3\2\0"+
    "\4\3\2\0\5\3\1\u04a3\36\3\2\0\4\3\2\0"+
    "\21\3\1\u04a4\22\3\2\0\4\3\2\0\10\3\1\u04a5"+
    "\33\3\2\0\4\3\2\0\21\3\1\u04a6\22\3\2\0"+
    "\4\3\2\0\22\3\1\u04a7\21\3\2\0\4\3\2\0"+
    "\6\3\1\u04a8\35\3\2\0\4\3\2\0\6\3\1\u04a9"+
    "\35\3\2\0\4\3\2\0\10\3\1\u04aa\33\3\2\0"+
    "\4\3\2\0\23\3\1\u04ab\20\3\2\0\4\3\2\0"+
    "\11\3\1\u04ac\32\3\2\0\4\3\2\0\24\3\1\u04ad"+
    "\17\3\2\0\4\3\2\0\20\3\1\u04ae\23\3\2\0"+
    "\4\3\2\0\17\3\1\u04af\24\3\2\0\4\3\2\0"+
    "\2\3\1\u04b0\41\3\2\0\4\3\2\0\11\3\1\u04b1"+
    "\32\3\2\0\4\3\2\0\10\3\1\u04b2\33\3\2\0"+
    "\4\3\2\0\5\3\1\u04b3\36\3\2\0\4\3\2\0"+
    "\23\3\1\u04b4\20\3\2\0\4\3\2\0\11\3\1\u04b5"+
    "\32\3\2\0\4\3\2\0\4\3\1\u04b6\37\3\2\0"+
    "\4\3\2\0\4\3\1\u04b7\37\3\2\0\4\3\2\0"+
    "\14\3\1\u04b8\3\3\1\u04b9\23\3\2\0\4\3\2\0"+
    "\10\3\1\u04ba\33\3\2\0\4\3\2\0\7\3\1\u04bb"+
    "\34\3\2\0\4\3\2\0\6\3\1\u04bc\35\3\2\0"+
    "\4\3\2\0\23\3\1\u04bd\20\3\2\0\4\3\2\0"+
    "\5\3\1\u04be\36\3\2\0\4\3\2\0\4\3\1\u04bf"+
    "\37\3\2\0\4\3\2\0\4\3\1\u04c0\37\3\2\0"+
    "\4\3\2\0\21\3\1\u04c1\22\3\2\0\4\3\2\0"+
    "\4\3\1\u04c2\37\3\2\0\4\3\2\0\20\3\1\u04c3"+
    "\23\3\2\0\4\3\2\0\11\3\1\u04c4\32\3\2\0"+
    "\4\3\2\0\17\3\1\u04c5\24\3\2\0\4\3\2\0"+
    "\32\3\1\u04c6\11\3\2\0\4\3\2\0\2\3\1\u04c7"+
    "\41\3\2\0\4\3\2\0\24\3\1\u04c8\17\3\2\0"+
    "\4\3\2\0\11\3\1\u04c9\32\3\2\0\4\3\2\0"+
    "\6\3\1\u04ca\35\3\2\0\4\3\2\0\20\3\1\u04cb"+
    "\23\3\2\0\4\3\2\0\6\3\1\u04cc\35\3\2\0"+
    "\4\3\2\0\11\3\1\u04cd\32\3\2\0\4\3\2\0"+
    "\11\3\1\u04ce\32\3\2\0\4\3\2\0\15\3\1\u04cf"+
    "\26\3\2\0\4\3\2\0\15\3\1\u04d0\26\3\2\0"+
    "\4\3\2\0\23\3\1\u04d1\20\3\2\0\4\3\2\0"+
    "\21\3\1\u04d2\22\3\2\0\4\3\2\0\20\3\1\u04d3"+
    "\23\3\2\0\4\3\2\0\6\3\1\u04d4\35\3\2\0"+
    "\4\3\2\0\10\3\1\u04d5\33\3\2\0\4\3\2\0"+
    "\10\3\1\u04d6\33\3\2\0\4\3\2\0\12\3\1\u04d7"+
    "\31\3\2\0\4\3\2\0\12\3\1\u04d8\31\3\2\0"+
    "\4\3\2\0\5\3\1\u04d9\36\3\2\0\4\3\2\0"+
    "\2\3\1\u04da\41\3\2\0\4\3\2\0\10\3\1\u04db"+
    "\33\3\2\0\4\3\2\0\17\3\1\u04dc\24\3\2\0"+
    "\4\3\2\0\10\3\1\u04dd\33\3\2\0\4\3\2\0"+
    "\10\3\1\u04de\33\3\2\0\4\3\2\0\4\3\1\u04df"+
    "\37\3\2\0\4\3\2\0\2\3\1\u04e0\41\3\2\0"+
    "\4\3\2\0\12\3\1\u04e1\31\3\2\0\4\3\2\0"+
    "\11\3\1\u04e2\32\3\2\0\4\3\2\0\10\3\1\u04e3"+
    "\33\3\2\0\4\3\2\0\13\3\1\u04e4\30\3\2\0"+
    "\4\3\2\0\11\3\1\u04e5\32\3\2\0\4\3\2\0"+
    "\10\3\1\u04e6\33\3\2\0\4\3\2\0\21\3\1\u04e7"+
    "\22\3\2\0\4\3\2\0\10\3\1\u04e8\33\3\2\0"+
    "\4\3\2\0\10\3\1\u04e9\33\3\2\0\4\3\2\0"+
    "\2\3\1\u04ea\41\3\2\0\4\3\2\0\11\3\1\u04eb"+
    "\32\3\2\0\4\3\2\0\10\3\1\u04ec\33\3\2\0"+
    "\4\3\2\0\22\3\1\u04ed\21\3\2\0\4\3\2\0"+
    "\22\3\1\u04ee\21\3\2\0\4\3\2\0\4\3\1\u04ef"+
    "\37\3\2\0\4\3\2\0\4\3\1\u04f0\37\3\2\0"+
    "\4\3\2\0\17\3\1\u04f1\24\3\2\0\4\3\2\0"+
    "\25\3\1\u04f2\16\3\2\0\4\3\2\0\12\3\1\u04f3"+
    "\31\3\2\0\4\3\2\0\22\3\1\u04f4\21\3\2\0"+
    "\4\3\2\0\22\3\1\u04f5\21\3\2\0\4\3\2\0"+
    "\13\3\1\u04f6\30\3\2\0\4\3\2\0\14\3\1\u04f7"+
    "\3\3\1\u04f8\23\3\2\0\4\3\2\0\15\3\1\u04f9"+
    "\26\3\2\0\4\3\2\0\23\3\1\u04fa\20\3\2\0"+
    "\4\3\2\0\17\3\1\u04fb\24\3\2\0\4\3\2\0"+
    "\2\3\1\u04fc\41\3\2\0\4\3\2\0\10\3\1\u04fd"+
    "\33\3\2\0\4\3\2\0\5\3\1\u04fe\36\3\2\0"+
    "\4\3\2\0\6\3\1\u04ff\35\3\2\0\4\3\2\0"+
    "\2\3\1\u0500\41\3\2\0\4\3\2\0\11\3\1\u0501"+
    "\32\3\2\0\4\3\2\0\11\3\1\u0502\32\3\2\0"+
    "\4\3\2\0\10\3\1\u0503\33\3\2\0\4\3\2\0"+
    "\10\3\1\u0504\33\3\2\0\4\3\2\0\12\3\1\u0505"+
    "\31\3\2\0\4\3\2\0\14\3\1\u0506\3\3\1\u0507"+
    "\23\3\2\0\4\3\2\0\11\3\1\u0508\32\3\2\0"+
    "\4\3\2\0\11\3\1\u0509\32\3\2\0\4\3\2\0"+
    "\10\3\1\u050a\33\3\2\0\4\3\2\0\5\3\1\u050b"+
    "\36\3\2\0\4\3\2\0\11\3\1\u050c\32\3\2\0"+
    "\4\3\2\0\12\3\1\u050d\31\3\2\0\4\3\2\0"+
    "\17\3\1\u050e\24\3\2\0\4\3\2\0\12\3\1\u050f"+
    "\31\3\2\0\4\3\2\0\26\3\1\u0510\15\3\2\0"+
    "\4\3\2\0\26\3\1\u0511\15\3\2\0\4\3\2\0"+
    "\22\3\1\u0512\21\3\2\0\4\3\2\0\22\3\1\u0513"+
    "\21\3\2\0\4\3\2\0\14\3\1\u0514\3\3\1\u0515"+
    "\23\3\2\0\4\3\2\0\26\3\1\u0516\15\3\2\0"+
    "\4\3\2\0\26\3\1\u0517\15\3\2\0\4\3\2\0"+
    "\21\3\1\u0518\22\3\2\0\4\3\2\0\4\3\1\u0519"+
    "\37\3\2\0\4\3\2\0\7\3\1\u051a\34\3\2\0"+
    "\4\3\2\0\7\3\1\u051b\34\3\2\0\4\3\2\0"+
    "\11\3\1\u051c\32\3\2\0\4\3\2\0\11\3\1\u051d"+
    "\32\3\2\0\4\3\2\0\4\3\1\u051e\37\3\2\0"+
    "\4\3\2\0\4\3\1\u051f\37\3\2\0\4\3\2\0"+
    "\4\3\1\u0520\37\3\2\0\4\3\2\0\26\3\1\u0521"+
    "\15\3\2\0\4\3\2\0\26\3\1\u0522\15\3\2\0"+
    "\4\3\2\0\11\3\1\u0523\32\3\2\0\4\3\2\0"+
    "\11\3\1\u0524\32\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[50424];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\0\1\11\u051f\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1316];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

/* store a reference to the parser object */
private Parser yyparser;

/* constructor taking an additional parser object */
public Scanner(java.io.Reader r, Parser yyparser) {
	this(r);
	this.yyparser = yyparser;
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 126) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 186: 
          { return (Parser.TK_CA_TAU_SCALE);
          }
        case 199: break;
        case 32: 
          { return (Parser.TK_EVENT);
          }
        case 200: break;
        case 172: 
          { return (Parser.TK_AUGMENTATION_INIT);
          }
        case 201: break;
        case 83: 
          { return (Parser.TK_TAU_NOISE);
          }
        case 202: break;
        case 179: 
          { return (Parser.TK_TAU_SCALE_H);
          }
        case 203: break;
        case 87: 
          { return (Parser.TK_END_EVENT);
          }
        case 204: break;
        case 30: 
          { return (Parser.TK_LOWER);
          }
        case 205: break;
        case 183: 
          { return (Parser.TK_BETA_SCALE_H);
          }
        case 206: break;
        case 31: 
          { return (Parser.TK_UPPER);
          }
        case 207: break;
        case 151: 
          { return (Parser.TK_LEARN_SHAPE);
          }
        case 208: break;
        case 2: 
          { yyparser.yylval.sval = yytext(); return (Parser.NAME);
          }
        case 209: break;
        case 194: 
          { return (Parser.TK_END_SYN_FD);
          }
        case 210: break;
        case 181: 
          { return (Parser.TK_CA_SPIKE_INC );
          }
        case 211: break;
        case 43: 
          { return (Parser.TK_CA_TAU);
          }
        case 212: break;
        case 155: 
          { return (Parser.TK_CONNECT_RPT);
          }
        case 213: break;
        case 122: 
          { return (Parser.TK_COLUMN_TYPE);
          }
        case 214: break;
        case 73: 
          { return (Parser.TK_RSE_INIT);
          }
        case 215: break;
        case 77: 
          { return (Parser.TK_VOLTAGES);
          }
        case 216: break;
        case 21: 
          { return (Parser.TK_PROB);
          }
        case 217: break;
        case 28: 
          { return (Parser.TK_BRAIN);
          }
        case 218: break;
        case 164: 
          { return (Parser.TK_VTAU_VOLT_M);
          }
        case 219: break;
        case 119: 
          { return (Parser.TK_CA_EXTERNAL);
          }
        case 220: break;
        case 85: 
          { return (Parser.TK_END_BRAIN);
          }
        case 221: break;
        case 96: 
          { return (Parser.TK_DYN_RANGE);
          }
        case 222: break;
        case 191: 
          { return (Parser.TK_SLOPE_H_STDEV);
          }
        case 223: break;
        case 76: 
          { return (Parser.TK_DISTANCE);
          }
        case 224: break;
        case 156: 
          { return (Parser.TK_CELLS_PER_FREQ);
          }
        case 225: break;
        case 158: 
          { return (Parser.TK_ST_INJECT);
          }
        case 226: break;
        case 54: 
          { return (Parser.TK_HEBB_START);
          }
        case 227: break;
        case 11: 
          { return (Parser.TK_FSV);
          }
        case 228: break;
        case 160: 
          { return (Parser.TK_END_LSHELL);
          }
        case 229: break;
        case 114: 
          { return (Parser.TK_LEARN_LABEL);
          }
        case 230: break;
        case 129: 
          { return (Parser.TK_SYN_REVERSAL);
          }
        case 231: break;
        case 89: 
          { return (Parser.TK_CELL_TYPE);
          }
        case 232: break;
        case 40: 
          { return (Parser.TK_OPTION);
          }
        case 233: break;
        case 101: 
          { return (Parser.TK_END_COLUMN);
          }
        case 234: break;
        case 93: 
          { return (Parser.TK_RSE_LABEL);
          }
        case 235: break;
        case 46: 
          { return (Parser.TK_REPORT);
          }
        case 236: break;
        case 79: 
          { return (Parser.TK_STIM_TYPE);
          }
        case 237: break;
        case 133: 
          { return (Parser.TK_E_HALF_MIN_H);
          }
        case 238: break;
        case 193: 
          { return (Parser.TK_END_SYN_AUGMENTATION);
          }
        case 239: break;
        case 162: 
          { return (Parser.TK_CA_SCALE);
          }
        case 240: break;
        case 25: 
          { yyparser.yylval.sval = yytext(); return (Parser.TK_Kahp);
          }
        case 241: break;
        case 126: 
          { return (Parser.TK_SELECT_FRONT);
          }
        case 242: break;
        case 165: 
          { return (Parser.TK_AUGMENTATION_TAU);
          }
        case 243: break;
        case 147: 
          { return (Parser.TK_VTAU_VAL_M);
          }
        case 244: break;
        case 159: 
          { return (Parser.TK_SPIKE_HW);
          }
        case 245: break;
        case 108: 
          { return (Parser.TK_VERT_TRANS);
          }
        case 246: break;
        case 35: 
          { return (Parser.TK_DELAY);
          }
        case 247: break;
        case 197: 
          { return (Parser.TK_POS_HEB_PEAK_DELTA_USE);
          }
        case 248: break;
        case 121: 
          { return (Parser.TK_CA_INTERNAL);
          }
        case 249: break;
        case 24: 
          { return (Parser.TK_MODE);
          }
        case 250: break;
        case 138: 
          { return (Parser.TK_CA_EXP_RANGE);
          }
        case 251: break;
        case 84: 
          { return (Parser.TK_THRESHOLD);
          }
        case 252: break;
        case 116: 
          { return (Parser.TK_END_SYN_PSG);
          }
        case 253: break;
        case 157: 
          { return (Parser.TK_NEG_HEB_WINDOW);
          }
        case 254: break;
        case 82: 
          { return (Parser.TK_UNITARY_G);
          }
        case 255: break;
        case 167: 
          { return (Parser.TK_LEAK_G );
          }
        case 256: break;
        case 135: 
          { return (Parser.TK_END_STIMULUS);
          }
        case 257: break;
        case 152: 
          { return (Parser.TK_TIME_FREQ_INC);
          }
        case 258: break;
        case 100: 
          { return (Parser.TK_TIME_START);
          }
        case 259: break;
        case 95: 
          { return (Parser.TK_M_INITIAL);
          }
        case 260: break;
        case 65: 
          { return (Parser.TK_SYN_DATA);
          }
        case 261: break;
        case 131: 
          { return (Parser.TK_OVERRIDE);
          }
        case 262: break;
        case 149: 
          { return (Parser.TK_SLOPE_M);
          }
        case 263: break;
        case 166: 
          { return (Parser.TK_SYN_AUGMENTATION);
          }
        case 264: break;
        case 38: 
          { return (Parser.TK_SERVER);
          }
        case 265: break;
        case 13: 
          { yyparser.yylval.ival = 1; return (Parser.LOGICAL);
          }
        case 266: break;
        case 26: 
          { return (Parser.TK_ASCII);
          }
        case 267: break;
        case 47: 
          { return (Parser.TK_INJECT);
          }
        case 268: break;
        case 14: 
          { return (Parser.TK_JOB);
          }
        case 269: break;
        case 34: 
          { return (Parser.TK_MAX_G);
          }
        case 270: break;
        case 17: 
          { return (Parser.TK_SEED);
          }
        case 271: break;
        case 143: 
          { return (Parser.TK_LEAK_REVERSAL);
          }
        case 272: break;
        case 94: 
          { return (Parser.TK_REPORT_ON);
          }
        case 273: break;
        case 6: 
          { yyparser.yylval.sval = yytext(); return (Parser.TK_Na);
          }
        case 274: break;
        case 190: 
          { return (Parser.TK_ALPHA_SCALE_M);
          }
        case 275: break;
        case 45: 
          { return (Parser.TK_CORREL);
          }
        case 276: break;
        case 91: 
          { return (Parser.TK_FREQUENCY);
          }
        case 277: break;
        case 68: 
          { return (Parser.TK_TIME_END);
          }
        case 278: break;
        case 52: 
          { return (Parser.TK_SYN_PSG);
          }
        case 279: break;
        case 90: 
          { return (Parser.TK_FACIL_TAU);
          }
        case 280: break;
        case 41: 
          { return (Parser.TK_TIMING);
          }
        case 281: break;
        case 70: 
          { return (Parser.TK_PSG_FILE);
          }
        case 282: break;
        case 105: 
          { return (Parser.TK_R_MEMBRANE);
          }
        case 283: break;
        case 145: 
          { return (Parser.TK_CELL_SEQUENCE);
          }
        case 284: break;
        case 168: 
          { return (Parser.TK_END_SYN_LEARN);
          }
        case 285: break;
        case 20: 
          { return (Parser.TK_PORT);
          }
        case 286: break;
        case 169: 
          { return (Parser.TK_END_CSHELL);
          }
        case 287: break;
        case 132: 
          { return (Parser.TK_TAU_MEMBRANE);
          }
        case 288: break;
        case 12: 
          { return (Parser.TK_RSE);
          }
        case 289: break;
        case 112: 
          { return (Parser.TK_SYN_CALCIUM);
          }
        case 290: break;
        case 80: 
          { return (Parser.TK_SFD_START);
          }
        case 291: break;
        case 49: 
          { return (Parser.TK_AMP_END);
          }
        case 292: break;
        case 180: 
          { return (Parser.TK_TAU_SCALE_M);
          }
        case 293: break;
        case 75: 
          { return (Parser.TK_DEPR_TAU);
          }
        case 294: break;
        case 184: 
          { return (Parser.TK_BETA_SCALE_M);
          }
        case 295: break;
        case 182: 
          { return (Parser.TK_REVERSAL);
          }
        case 296: break;
        case 67: 
          { return (Parser.TK_LEARN);
          }
        case 297: break;
        case 50: 
          { return (Parser.TK_SFD_END);
          }
        case 298: break;
        case 59: 
          { yyparser.yylval.sval = yyparser.yytext; return (Parser.TK_INCLUDE);
          }
        case 299: break;
        case 125: 
          { return (Parser.TK_ABSOLUTE_USE);
          }
        case 300: break;
        case 178: 
          { return (Parser.TK_OUTPUT_CONNECT_MAP);
          }
        case 301: break;
        case 188: 
          { return (Parser.TK_VAL_M_STDEV);
          }
        case 302: break;
        case 58: 
          { return (Parser.TK_M_POWER);
          }
        case 303: break;
        case 39: 
          { return (Parser.TK_SINGLE);
          }
        case 304: break;
        case 74: 
          { return (Parser.TK_DURATION);
          }
        case 305: break;
        case 36: 
          { yyparser.yylval.sval = yytext(); return (Parser.TK_Knicd);
          }
        case 306: break;
        case 107: 
          { return (Parser.TK_DISTRIBUTE);
          }
        case 307: break;
        case 42: 
          { return (Parser.TK_HEIGHT);
          }
        case 308: break;
        case 69: 
          { return (Parser.TK_END_CELL);
          }
        case 309: break;
        case 92: 
          { return (Parser.TK_FREQ_ROWS);
          }
        case 310: break;
        case 111: 
          { return (Parser.TK_SYNAPSE_RSE);
          }
        case 311: break;
        case 173: 
          { return (Parser.TK_SYN_FD);
          }
        case 312: break;
        case 118: 
          { return (Parser.TK_PHASE_SHIFT);
          }
        case 313: break;
        case 103: 
          { return (Parser.TK_FREQ_START);
          }
        case 314: break;
        case 196: 
          { return (Parser.TK_VOLT_M_STDEV);
          }
        case 315: break;
        case 176: 
          { return (Parser.TK_NEG_HEB_PEAK_TIME);
          }
        case 316: break;
        case 53: 
          { return (Parser.TK_PATTERN);
          }
        case 317: break;
        case 10: 
          { return (Parser.TK_EXP);
          }
        case 318: break;
        case 185: 
          { return (Parser.TK_END_ST_INJECT);
          }
        case 319: break;
        case 161: 
          { return (Parser.TK_END_CMP);
          }
        case 320: break;
        case 7: 
          { yyparser.yylval.sval = yytext(); return (Parser.TK_Km);
          }
        case 321: break;
        case 115: 
          { return (Parser.TK_END_SYNAPSE);
          }
        case 322: break;
        case 150: 
          { return (Parser.TK_STRENGTH_RANGE);
          }
        case 323: break;
        case 134: 
          { return (Parser.TK_E_HALF_MIN_M);
          }
        case 324: break;
        case 163: 
          { return (Parser.TK_VTAU_VOLT_H);
          }
        case 325: break;
        case 16: 
          { return (Parser.TK_SAVE);
          }
        case 326: break;
        case 124: 
          { return (Parser.TK_INTERACTIVE);
          }
        case 327: break;
        case 22: 
          { return (Parser.TK_CELL);
          }
        case 328: break;
        case 171: 
          { return (Parser.TK_MAX_AUGMENTATION);
          }
        case 329: break;
        case 81: 
          { return (Parser.TK_SFD_LABEL);
          }
        case 330: break;
        case 142: 
          { return (Parser.TK_WARNINGS_OFF);
          }
        case 331: break;
        case 113: 
          { return (Parser.TK_LSHELL);
          }
        case 332: break;
        case 136: 
          { return (Parser.TK_END_SYN_DATA);
          }
        case 333: break;
        case 198: 
          { return (Parser.TK_NEG_HEB_PEAK_DELTA_USE);
          }
        case 334: break;
        case 78: 
          { return (Parser.TK_AMP_START);
          }
        case 335: break;
        case 71: 
          { return (Parser.TK_HEBB_END);
          }
        case 336: break;
        case 102: 
          { return (Parser.TK_END_REPORT);
          }
        case 337: break;
        case 174: 
          { return (Parser.TK_POS_HEB_PEAK_TIME);
          }
        case 338: break;
        case 137: 
          { return (Parser.TK_CA_TAU_DECAY);
          }
        case 339: break;
        case 61: 
          { return (Parser.TK_SAMESEED);
          }
        case 340: break;
        case 154: 
          { return (Parser.TK_POS_HEB_WINDOW);
          }
        case 341: break;
        case 8: 
          { yyparser.yylval.sval = yytext(); return (Parser.TK_Ka);
          }
        case 342: break;
        case 110: 
          { return (Parser.TK_SERVER_PORT);
          }
        case 343: break;
        case 51: 
          { return (Parser.TK_SYNAPSE);
          }
        case 344: break;
        case 72: 
          { return (Parser.TK_FILENAME);
          }
        case 345: break;
        case 62: 
          { return (Parser.TK_SAVE_SYN);
          }
        case 346: break;
        case 33: 
          { return (Parser.TK_CELLS);
          }
        case 347: break;
        case 63: 
          { return (Parser.TK_STRENGTH);
          }
        case 348: break;
        case 123: 
          { return (Parser.TK_CMP);
          }
        case 349: break;
        case 60: 
          { return (Parser.TK_VERSION);
          }
        case 350: break;
        case 44: 
          { return (Parser.TK_COLUMN);
          }
        case 351: break;
        case 146: 
          { return (Parser.TK_VTAU_VAL_H);
          }
        case 352: break;
        case 27: 
          { return (Parser.TK_ALPHA);
          }
        case 353: break;
        case 48: 
          { return (Parser.TK_VMREST);
          }
        case 354: break;
        case 192: 
          { return (Parser.TK_SLOPE_M_STDEV);
          }
        case 355: break;
        case 177: 
          { return (Parser.TK_AUGMENTATION_DELAY);
          }
        case 356: break;
        case 139: 
          { return (Parser.TK_CA_EXP);
          }
        case 357: break;
        case 56: 
          { return (Parser.TK_CONNECT);
          }
        case 358: break;
        case 29: 
          { return (Parser.TK_LAYER);
          }
        case 359: break;
        case 130: 
          { return (Parser.TK_OUTPUT_CELLS);
          }
        case 360: break;
        case 98: 
          { return (Parser.TK_SYNAPSE_UF);
          }
        case 361: break;
        case 86: 
          { return (Parser.TK_END_LAYER);
          }
        case 362: break;
        case 15: 
          { return (Parser.TK_AUTO);
          }
        case 363: break;
        case 109: 
          { return (Parser.TK_AVERAGE_SYN);
          }
        case 364: break;
        case 117: 
          { return (Parser.TK_END_CHANNEL);
          }
        case 365: break;
        case 120: 
          { return (Parser.TK_CA_HALF_MIN);
          }
        case 366: break;
        case 9: 
          { return (Parser.TK_SFD);
          }
        case 367: break;
        case 148: 
          { return (Parser.TK_SLOPE_H);
          }
        case 368: break;
        case 19: 
          { return (Parser.TK_TYPE);
          }
        case 369: break;
        case 18: 
          { return (Parser.TK_LOAD);
          }
        case 370: break;
        case 66: 
          { return (Parser.TK_LOCATION);
          }
        case 371: break;
        case 37: 
          { return (Parser.TK_WIDTH);
          }
        case 372: break;
        case 1: 
          { yyparser.yylval.ival = Integer.parseInt(yytext()); return (Parser.INTEGER);
          }
        case 373: break;
        case 64: 
          { return (Parser.TK_STIMULUS);
          }
        case 374: break;
        case 106: 
          { return (Parser.TK_DATA_LABEL);
          }
        case 375: break;
        case 99: 
          { return (Parser.TK_LAYER_TYPE);
          }
        case 376: break;
        case 187: 
          { return (Parser.TK_VAL_H_STDEV);
          }
        case 377: break;
        case 55: 
          { return (Parser.TK_H_POWER);
          }
        case 378: break;
        case 128: 
          { return (Parser.TK_SYN_LEARN);
          }
        case 379: break;
        case 4: 
          { yyparser.yylval.dval = new Double(yytext()); return (Parser.REAL);
          }
        case 380: break;
        case 144: 
          { return (Parser.TK_HIDE_TIMESTEP);
          }
        case 381: break;
        case 189: 
          { return (Parser.TK_ALPHA_SCALE_H);
          }
        case 382: break;
        case 88: 
          { return (Parser.TK_H_INITIAL);
          }
        case 383: break;
        case 170: 
          { return (Parser.TK_PREV_SPIKE_RANGE);
          }
        case 384: break;
        case 140: 
          { return (Parser.TK_CSHELL);
          }
        case 385: break;
        case 104: 
          { return (Parser.TK_RELOAD_SYN);
          }
        case 386: break;
        case 175: 
          { return (Parser.TK_RECURRENT_CONNECT);
          }
        case 387: break;
        case 141: 
          { return (Parser.TK_IGNORE_EMPTY);
          }
        case 388: break;
        case 127: 
          { return (Parser.TK_SPIKE_RPT);
          }
        case 389: break;
        case 23: 
          { return (Parser.TK_RATE);
          }
        case 390: break;
        case 97: 
          { return (Parser.TK_SPIKE);
          }
        case 391: break;
        case 195: 
          { return (Parser.TK_VOLT_H_STDEV);
          }
        case 392: break;
        case 57: 
          { return (Parser.TK_CHANNEL);
          }
        case 393: break;
        case 5: 
          { yyparser.yylval.ival = 0; return (Parser.LOGICAL);
          }
        case 394: break;
        case 153: 
          { return (Parser.TK_END_SPIKE);
          }
        case 395: break;
        case 3: 
          { 
          }
        case 396: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
